{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///koto.js","webpack:///webpack/bootstrap 0875920844a39b89fb47","webpack:///./chart.js","webpack:///./assert.js","webpack:///./layer.js","webpack:///../~/d3-selection/build/d3-selection.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_classCallCheck","instance","Constructor","defineProperty","_typeof","Symbol","iterator","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","Array","isArray","_createClass","defineProperties","target","props","descriptor","key","protoProps","staticProps","_assert","_assert2","_layer2","_layer3","Chart","selection","_this","base","hasDrawn","merge","configs","_len","arguments","args","_key","assign","apply","concat","accessors","_len2","_key2","promise","_layers","Map","_attached","_events","config","a","accessor","data","name","layer","_chart","options","_layer","_Chart","get","set","remove","attachmentName","chart","rawData","attachmentData","_this2","promises","Promise","resolve","transform","then","preDraw","trigger","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","values","draw","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","entries","_step2$value","attachment","demux","all","postDraw","postTransition","callback","context","events","has","Set","add","_once","off","on","clear","forEach","event","clone","map","_len3","_key3","_event$callback","node","parentNode","removeChild","nameOrObject","setPercentage","calculatePercentage","initialValue","min","Math","definition","constrain","percentage","hasOwnProperty","setter","console","warn","getter","item","init","_ref","_this3","getPrototypeOf","initialize","Layer","kotoAssert","test","message","Error","_d3Selection","_d3","_base","_handlers","_lifecycleRe","dataBind","insert","eventName","handler","idx","handlers","splice","endall","transition","n","size","each","promiseCallback","bound","entering","method","len","tidx","tlen","enter","exit","l","empty","global","namespace","prefix","indexOf","slice","namespaces","space","local","creatorInherit","document","ownerDocument","uri","namespaceURI","xhtml","documentElement","createElement","createElementNS","creatorFixed","fullname","creator","Local","_","nextId","toString","filterContextListener","listener","index","group","contextListener","related","relatedTarget","compareDocumentPosition","event1","event0","__data__","parseTypenames","typenames","trim","split","t","type","onRemove","typename","__on","o","j","removeEventListener","capture","onAdd","wrap","filterEvents","d","addEventListener","selection_on","customEvent","that","sourceEvent","source","current","point","svg","ownerSVGElement","createSVGPoint","x","clientX","y","clientY","matrixTransform","getScreenCTM","inverse","rect","getBoundingClientRect","left","clientLeft","top","clientTop","mouse","changedTouches","none","selector","querySelector","selection_select","select","groups","_groups","subgroups","subnode","subgroup","Selection","_parents","selectorAll","querySelectorAll","selection_selectAll","parents","selection_filter","match","matcher$1","sparse","update","selection_enter","_enter","EnterNode","parent","datum","_next","_parent","constant","bindIndex","groupLength","dataLength","bindKey","keyValue","nodeByKeyValue","keyValues","keyPrefix","selection_data","bind","enterGroup","updateGroup","exitGroup","previous","i0","i1","_exit","selection_exit","selection_merge","groups0","groups1","m0","m1","merges","group0","group1","selection_order","nextSibling","insertBefore","selection_sort","compare","compareNode","b","ascending","sortgroups","sortgroup","sort","order","NaN","selection_call","selection_nodes","nodes","selection_node","selection_size","selection_empty","selection_each","attrRemove","removeAttribute","attrRemoveNS","removeAttributeNS","attrConstant","setAttribute","attrConstantNS","setAttributeNS","attrFunction","v","attrFunctionNS","selection_attr","getAttributeNS","getAttribute","defaultView","styleRemove","style","removeProperty","styleConstant","priority","setProperty","styleFunction","selection_style","getComputedStyle","getPropertyValue","propertyRemove","propertyConstant","propertyFunction","selection_property","classArray","string","classList","ClassList","_node","_names","classedAdd","names","list","classedRemove","classedTrue","classedFalse","classedFunction","selection_classed","contains","textRemove","textContent","textConstant","textFunction","selection_text","htmlRemove","innerHTML","htmlConstant","htmlFunction","selection_html","raise","appendChild","selection_raise","lower","previousSibling","firstChild","selection_lower","selection_append","constantNull","selection_insert","before","selection_remove","selection_datum","property","dispatchEvent","params","window","CustomEvent","createEvent","initEvent","bubbles","cancelable","detail","dispatchConstant","dispatchFunction","selection_dispatch","selectAll","touch","touches","identifier","points","xlink","xml","xmlns","matcher","matches","element","vendorMatches","webkitMatchesSelector","msMatchesSelector","mozMatchesSelector","oMatchesSelector","element$1","mouseenter","mouseleave","child","join","filter","attr","classed","text","html","append","dispatch"],"mappings":"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","file":"koto.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Koto\"] = factory();\n\telse\n\t\troot[\"Koto\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Koto\"] = factory();\n\telse\n\t\troot[\"Koto\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _assert = __webpack_require__(1);\n\t\n\tvar _assert2 = _interopRequireDefault(_assert);\n\t\n\tvar _layer2 = __webpack_require__(2);\n\t\n\tvar _layer3 = _interopRequireDefault(_layer2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * Create a koto chart\n\t *\n\t * @constructor\n\t *\n\t * @param {d3.selection} selection The chart's \"base\" DOM node. This should\n\t *        contain any nodes that the chart generates.\n\t */\n\t\n\tvar Chart = function () {\n\t  function Chart(selection) {\n\t    var _this = this;\n\t\n\t    _classCallCheck(this, Chart);\n\t\n\t    this.base = selection; // Container for chart @type {d3.selection}.\n\t    this.hasDrawn = false; // Has this chart been drawn at least once?\n\t\n\t    this.merge = {};\n\t    this.merge.configs = function () {\n\t      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t        args[_key] = arguments[_key];\n\t      }\n\t\n\t      _this.configs = Object.assign.apply(Object, [{}, _this.configs].concat(args));\n\t      return _this.configs;\n\t    };\n\t    this.merge.accessors = function () {\n\t      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t        args[_key2] = arguments[_key2];\n\t      }\n\t\n\t      _this.accessors = Object.assign.apply(Object, [{}, _this.accessors].concat(args));\n\t      return _this.accessors;\n\t    };\n\t\n\t    // exposed properties\n\t    this.configs = {};\n\t    this.accessors = {};\n\t    this.promise = null;\n\t\n\t    // private\n\t    this._layers = new Map();\n\t    this._attached = new Map();\n\t    this._events = new Map();\n\t\n\t    // alias\n\t    this.c = this.config;\n\t    this.a = this.accessor;\n\t  }\n\t\n\t  /**\n\t   * A \"hook\" method that you may define to modify input data before it is used\n\t   * to draw the chart's layers and attachments. This method will be used by all\n\t   * sub-classes. You may optionally return a promise if your data transformation\n\t   * is asynchronous (i.e. you're using web workers).\n\t   *\n\t   * Note: you will most likely never call this method directly, but rather\n\t   * include it as part of a chart definition, and then rely on koto to\n\t   * invoke it when you draw the chart with {@link Chart#draw}.\n\t   *\n\t   * @param {Array} data Input data provided to @link Chart#draw}.\n\t   * @returns {mixed} Data to be used in drawing the chart's layers and\n\t   *                  attachments.\n\t   */\n\t\n\t\n\t  _createClass(Chart, [{\n\t    key: 'transform',\n\t    value: function transform(data) {\n\t      return data;\n\t    }\n\t\n\t    /**\n\t     * A \"hook\" method that you may define to choose which mutation of the input\n\t     * data is sent to which of the attached charts (by name). This method will\n\t     * be used by all sub-classes. This only applies to charts that use the\n\t     * {@link Chart#attach} method.\n\t     *\n\t     * Note: you will most likely never call this method directly, but rather\n\t     * include it as part of a chart definition, and then rely on koto to\n\t     * invoke it when you draw the chart with {@link Chart#draw}.\n\t     *\n\t     * @param {String} data Name of attached chart defined in {@link Chart#attach}.\n\t     * @param {Array} data Input data provided to {@link Chart#draw}.\n\t     * @returns {mixed} Data to be used in drawing the chart's layers and\n\t     *                  attachments.\n\t     */\n\t\n\t  }, {\n\t    key: 'demux',\n\t    value: function demux(name, data) {\n\t      return data;\n\t    }\n\t\n\t    /**\n\t     * A \"hook\" method that will allow you to run some arbitrary code before\n\t     * {@link Chart#draw}. This will run every time {@link Chart#draw} is called.\n\t     *\n\t     * Note: you will most likely never call this method directly, but rather\n\t     * include it as part of a chart definition, and then rely on koto to\n\t     * invoke it when you draw the chart with {@link Chart#draw}.\n\t     *\n\t     * Note 2: a `postDraw` event is also fired when appropriate;\n\t     *\n\t     * @param  {[type]} data [description]\n\t     * @return {[type]}      [description]\n\t     */\n\t\n\t  }, {\n\t    key: 'preDraw',\n\t    value: function preDraw() {}\n\t\n\t    /**\n\t     * A \"hook\" method that will allow you to run some arbitrary code after\n\t     * {@link Chart#draw}. This will run every time {@link Chart#draw} is called.\n\t     *\n\t     * Note: you will most likely never call this method directly, but rather\n\t     * include it as part of a chart definition, and then rely on koto to\n\t     * invoke it when you draw the chart with {@link Chart#draw}.\n\t     *\n\t     * @param  {[type]} data [description]\n\t     */\n\t\n\t  }, {\n\t    key: 'postDraw',\n\t    value: function postDraw() {}\n\t\n\t    /**\n\t     * A \"hook\" method that will allow you to run some arbitrary code after\n\t     * {@link Chart#draw} is called AND after all transitions for all layers\n\t     * and attached charts have been completed. This will run every time\n\t     * {@link Chart#draw} is called.\n\t     *\n\t     * Note: you will most likely never call this method directly, but rather\n\t     * include it as part of a chart definition, and then rely on koto to\n\t     * invoke it when you draw the chart with {@link Chart#draw}.\n\t     *\n\t     * Note 2: a `postTransition` event is also fired when appropriate;\n\t     *\n\t     * @param  {[type]} data\n\t     */\n\t\n\t  }, {\n\t    key: 'postTransition',\n\t    value: function postTransition() {}\n\t\n\t    /**\n\t     * Remove a layer from the chart.\n\t     *\n\t     * @param {String} name The name of the layer to remove.\n\t     * @returns {Layer} The layer removed by this operation.\n\t     */\n\t\n\t  }, {\n\t    key: 'unlayer',\n\t    value: function unlayer(name) {\n\t      var layer = this.layer(name);\n\t\n\t      this._layers.delete(name);\n\t      delete layer._chart;\n\t\n\t      return layer;\n\t    }\n\t\n\t    /**\n\t     * Interact with the chart's {@link Layer|layers}.\n\t     *\n\t     * If only a `name` is provided, simply return the layer registered to that\n\t     * name (if any).\n\t     *\n\t     * If a `name` and `selection` are provided, treat the `selection` as a\n\t     * previously-created layer and attach it to the chart with the specified\n\t     * `name`.\n\t     *\n\t     * If all three arguments are specified, initialize a new {@link Layer} using\n\t     * the specified `selection` as a base passing along the specified `options`.\n\t     *\n\t     * The {@link Layer.draw} method of attached layers will be invoked\n\t     * whenever this chart's {@link Chart#draw} is invoked and will receive the\n\t     * data (optionally modified by the chart's {@link Chart#transform} method.\n\t     *\n\t     * @param {String} name Name of the layer to attach or retrieve.\n\t     * @param {d3.selection|Layer} [selection] The layer's base or a\n\t     *        previously-created {@link Layer}.\n\t     * @param {Object} [options] Options to be forwarded to {@link Layer|the Layer\n\t     *        constructor}\n\t     *\n\t     * @returns {Layer}\n\t     */\n\t\n\t  }, {\n\t    key: 'layer',\n\t    value: function layer(name, selection, options) {\n\t      var _Chart = this;\n\t      var _layer;\n\t\n\t      if (arguments.length === 1) {\n\t        return this._layers.get(name);\n\t      }\n\t\n\t      // we are reattaching a previous layer, which the\n\t      // selection argument is now set to.\n\t      if (arguments.length === 2) {\n\t\n\t        if (selection instanceof _layer3.default) {\n\t          selection._chart = this;\n\t          this._layers.set(name, selection);\n\t          return this._layers.get(name);\n\t        } else {\n\t          (0, _assert2.default)(false, 'When reattaching a layer, the second argument must be a koto layer');\n\t        }\n\t      }\n\t\n\t      selection._chart = this;\n\t\n\t      _layer = new _layer3.default(selection, options);\n\t\n\t      _layer.remove = function () {\n\t        _Chart._layers.delete(name);\n\t        return this;\n\t      };\n\t\n\t      this._layers.set(name, _layer);\n\t\n\t      return _layer;\n\t    }\n\t\n\t    /**\n\t     * Register or retrieve an \"attachment\" Chart. The \"attachment\" chart's `draw`\n\t     * method will be invoked whenever the containing chart's `draw` method is\n\t     * invoked.\n\t     *\n\t     * @param {String} attachmentName Name of the attachment\n\t     * @param {Chart} [chart] koto to register as a mix in of this chart. When\n\t     *        unspecified, this method will return the attachment previously\n\t     *        registered with the specified `attachmentName` (if any).\n\t     *\n\t     * @returns {Chart} Reference to this chart (chainable).\n\t     */\n\t\n\t  }, {\n\t    key: 'attach',\n\t    value: function attach(attachmentName, chart) {\n\t      if (arguments.length === 1) {\n\t        return this._attached.get(attachmentName);\n\t      }\n\t\n\t      this._attached.set(attachmentName, chart);\n\t      return chart;\n\t    }\n\t\n\t    /**\n\t     * Update the chart's representation in the DOM, drawing all of its layers and\n\t     * any \"attachment\" charts (as attached via {@link Chart#attach}).\n\t     *\n\t     * Note: The first time you call this method, the property `hasDrawn` will be\n\t     * set to true. This is helpful if you want to only run some code on the first\n\t     * time the chart is drawn.\n\t     *\n\t     * @param {Object} data Data to pass to the {@link Layer#draw|draw method} of\n\t     *        this cart's {@link Layer|layers} (if any) and the {@link\n\t     *        Chart#draw|draw method} of this chart's attachments (if any).\n\t     */\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(rawData) {\n\t      var _this2 = this;\n\t\n\t      var layer,\n\t          attachmentData,\n\t          promises = [];\n\t\n\t      return Promise.resolve(this.transform(rawData)).then(function (data) {\n\t        _this2.preDraw(data);\n\t        _this2.trigger('preDraw', data);\n\t\n\t        var _iteratorNormalCompletion = true;\n\t        var _didIteratorError = false;\n\t        var _iteratorError = undefined;\n\t\n\t        try {\n\t          for (var _iterator = _this2._layers.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t            layer = _step.value;\n\t\n\t            layer.draw(data);\n\t            promises.push(layer.promise);\n\t          }\n\t        } catch (err) {\n\t          _didIteratorError = true;\n\t          _iteratorError = err;\n\t        } finally {\n\t          try {\n\t            if (!_iteratorNormalCompletion && _iterator.return) {\n\t              _iterator.return();\n\t            }\n\t          } finally {\n\t            if (_didIteratorError) {\n\t              throw _iteratorError;\n\t            }\n\t          }\n\t        }\n\t\n\t        var _iteratorNormalCompletion2 = true;\n\t        var _didIteratorError2 = false;\n\t        var _iteratorError2 = undefined;\n\t\n\t        try {\n\t          for (var _iterator2 = _this2._attached.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t            var _step2$value = _slicedToArray(_step2.value, 2);\n\t\n\t            var attachmentName = _step2$value[0];\n\t            var attachment = _step2$value[1];\n\t\n\t            attachmentData = _this2.demux ? _this2.demux(attachmentName, data) : data;\n\t            attachment.draw(attachmentData);\n\t            promises.push(attachment.promise);\n\t          }\n\t        } catch (err) {\n\t          _didIteratorError2 = true;\n\t          _iteratorError2 = err;\n\t        } finally {\n\t          try {\n\t            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t              _iterator2.return();\n\t            }\n\t          } finally {\n\t            if (_didIteratorError2) {\n\t              throw _iteratorError2;\n\t            }\n\t          }\n\t        }\n\t\n\t        _this2.hasDrawn = true;\n\t\n\t        _this2.promise = Promise.all(promises);\n\t\n\t        _this2.postDraw();\n\t        _this2.trigger('postDraw', data);\n\t\n\t        _this2.promise.then(function () {\n\t          _this2.postTransition(data);\n\t          _this2.trigger('postTransition', data);\n\t        });\n\t\n\t        return data;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Subscribe a callback function to an event triggered on the chart. See {@link\n\t     * Chart#once} to subscribe a callback function to an event for one occurrence.\n\t     *\n\t     * @externalExample {runnable} chart-on\n\t     *\n\t     * @param {String} name Name of the event\n\t     * @param {ChartEventHandler} callback Function to be invoked when the event\n\t     *        occurs\n\t     * @param {Object} [context] Value to set as `this` when invoking the\n\t     *        `callback`. Defaults to the chart instance.\n\t     *\n\t     * @returns {Chart} A reference to this chart (chainable).\n\t     */\n\t\n\t  }, {\n\t    key: 'on',\n\t    value: function on(name, callback, context) {\n\t      var events;\n\t      if (this._events.has(name)) {\n\t        events = this._events.get(name);\n\t      } else {\n\t        events = new Set();\n\t      }\n\t\n\t      events.add({\n\t        callback: callback,\n\t        context: context || this,\n\t        _chart: this\n\t      });\n\t\n\t      this._events.set(name, events);\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * Subscribe a callback function to an event triggered on the chart. This\n\t     * function will be invoked at the next occurrence of the event and immediately\n\t     * unsubscribed. See {@link Chart#on} to subscribe a callback function to an\n\t     * event indefinitely.\n\t     *\n\t     * @externalExample {runnable} chart-once\n\t     *\n\t     * @param {String} name Name of the event\n\t     * @param {ChartEventHandler} callback Function to be invoked when the event\n\t     *        occurs\n\t     * @param {Object} [context] Value to set as `this` when invoking the\n\t     *        `callback`. Defaults to the chart instance\n\t     *\n\t     * @returns {Chart} A reference to this chart (chainable)\n\t     */\n\t\n\t  }, {\n\t    key: 'once',\n\t    value: function once(name, callback, context) {\n\t      var self = this;\n\t      var _once = function _once() {\n\t        self.off(name, _once);\n\t        callback.apply(this, arguments);\n\t      };\n\t      return this.on(name, _once, context);\n\t    }\n\t\n\t    /**\n\t     * Unsubscribe one or more callback functions from an event triggered on the\n\t     * chart. When no arguments are specified, *all* handlers will be unsubscribed.\n\t     * When only a `name` is specified, all handlers subscribed to that event will\n\t     * be unsubscribed. When a `name` and `callback` are specified, only that\n\t     * function will be unsubscribed from that event. When a `name` and `context`\n\t     * are specified (but `callback` is omitted), all events bound to the given\n\t     * event with the given context will be unsubscribed.\n\t     *\n\t     * @externalExample {runnable} chart-off\n\t     *\n\t     * @param {String} [name] Name of the event to be unsubscribed\n\t     * @param {ChartEventHandler} [callback] Function to be unsubscribed\n\t     * @param {Object} [context] Contexts to be unsubscribed\n\t     *\n\t     * @returns {Chart} A reference to this chart (chainable).\n\t     */\n\t\n\t  }, {\n\t    key: 'off',\n\t    value: function off(name, callback, context) {\n\t\n\t      // remove all events\n\t      if (arguments.length === 0) {\n\t        this._events.clear();\n\t        return this;\n\t      }\n\t\n\t      // remove all events for a specific name\n\t      if (arguments.length === 1) {\n\t        if (this._events.has(name)) {\n\t          this._events.get(name).clear();\n\t        }\n\t        return this;\n\t      }\n\t\n\t      // remove all events that match whatever combination of name, context\n\t      // and callback.\n\t\n\t      this._events.get(name).forEach(function (event, clone, map) {\n\t        if (callback && callback === clone.callback || context && context === clone.context) {\n\t          map.delete(event);\n\t        }\n\t      });\n\t\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * Publish an event on this chart with the given `name`.\n\t     *\n\t     * @externalExample {runnable} chart-trigger\n\t     *\n\t     * @param {String} name Name of the event to publish\n\t     * @param {...*} arguments Values with which to invoke the registered\n\t     *        callbacks.\n\t     *\n\t     * @returns {Chart} A reference to this chart (chainable).\n\t     */\n\t\n\t  }, {\n\t    key: 'trigger',\n\t    value: function trigger(name) {\n\t      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n\t        args[_key3 - 1] = arguments[_key3];\n\t      }\n\t\n\t      if (this._events.has(name)) {\n\t        this._events.get(name).forEach(function (event) {\n\t          var _event$callback;\n\t\n\t          (_event$callback = event.callback).call.apply(_event$callback, [event.context].concat(args));\n\t        });\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * Cleanly dispose of chart\n\t     *\n\t     * @return undefined\n\t     */\n\t\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      var node = this.base.node();\n\t\n\t      // exposed properties\n\t      this.configs = {};\n\t      this.accessors = {};\n\t      this.promise = null;\n\t\n\t      // clear up remaining data\n\t      this._layers.clear();\n\t      this._attached.clear();\n\t      this._events.clear();\n\t\n\t      if (node.parentNode) {\n\t        node.parentNode.removeChild(node);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Get and set chart options (or configs)\n\t     *\n\t     * @param  {mixed} nameOrObject Name of item getting or setting\n\t     *                              or an object with key-value pairs.\n\t     * @param  {mixed} value The value for config item with that name.\n\t     * @return {mixed} if getting: the value. if setting: the chart instance.\n\t     */\n\t\n\t  }, {\n\t    key: 'config',\n\t    value: function config(nameOrObject, value) {\n\t      var key;\n\t      var definition;\n\t      var _Chart = this;\n\t\n\t      function setPercentage() {\n\t        function calculatePercentage(arr, initialValue) {\n\t          var min = Math.min.call(null, arr.map(function (name) {\n\t            return _Chart.config(name);\n\t          }));\n\t          return initialValue / min;\n\t        }\n\t\n\t        if (definition.constrain === true) {\n\t          definition.percentage = calculatePercentage(['width', 'height'], definition.value);\n\t        } else if (Array.isArray(definition.constrain)) {\n\t          definition.percentage = calculatePercentage(definition.constrain, definition.value);\n\t        } else {\n\t          definition.percentage = calculatePercentage([definition.constrain], definition.value);\n\t        }\n\t      }\n\t\n\t      if (arguments.length === 0) {\n\t        return this.configs;\n\t      }\n\t\n\t      if (arguments.length === 1) {\n\t        if ((typeof nameOrObject === 'undefined' ? 'undefined' : _typeof(nameOrObject)) === 'object') {\n\t          for (key in nameOrObject) {\n\t            if (this.configs.hasOwnProperty(key)) {\n\t              definition = this.configs[key];\n\t              if (definition.hasOwnProperty('setter')) {\n\t                definition.value = definition.setter.call(definition, nameOrObject[key]);\n\t              } else {\n\t                definition.value = nameOrObject[key];\n\t              }\n\t              if (definition.hasOwnProperty('constrain')) {\n\t                setPercentage();\n\t              }\n\t              this.configs[key] = definition;\n\t            } else {\n\t              console.warn('config with name ' + nameOrObject + ' is not defined.');\n\t            }\n\t          }\n\t          return this;\n\t        }\n\t\n\t        (0, _assert2.default)(this.configs.hasOwnProperty(nameOrObject), nameOrObject + ' is not a valid option.');\n\t        definition = this.configs[nameOrObject];\n\t        if (definition.hasOwnProperty('getter')) {\n\t          return definition.getter.call(definition);\n\t        }\n\t        return definition.value;\n\t      }\n\t\n\t      if (arguments.length === 2) {\n\t        if (this.configs.hasOwnProperty(nameOrObject)) {\n\t          definition = this.configs[nameOrObject];\n\t          if (definition.hasOwnProperty('setter')) {\n\t            definition.value = definition.setter.call(definition, value);\n\t          } else {\n\t            definition.value = value;\n\t          }\n\t          if (definition.hasOwnProperty('constrain')) {\n\t            setPercentage();\n\t          }\n\t          this.configs[nameOrObject] = definition;\n\t        } else {\n\t          console.warn('config with name ' + nameOrObject + ' is not defined.');\n\t        }\n\t        return this;\n\t      }\n\t    }\n\t\n\t    /**\n\t     * This will get or set any of the chart's accessors.\n\t     *\n\t     * @param  {String or Object} item If string, it will return the function for that accessor item.\n\t     *                                 If object, it will update that accessor with set function.\n\t     * @param  {function} [value] The function to update accessor item with.\n\t     * @return {object} The chart to preserve chainability.\n\t     */\n\t\n\t  }, {\n\t    key: 'accessor',\n\t    value: function accessor(item, value) {\n\t      var key;\n\t      if (arguments.length === 0) {\n\t        return this.accessors;\n\t      }\n\t\n\t      if (arguments.length === 1) {\n\t        if (typeof item === 'string') {\n\t          (0, _assert2.default)(this.accessors.hasOwnProperty(item), item + ' is not a valid accessor.');\n\t          return this.accessors[item];\n\t        } else {\n\t          for (key in item) {\n\t            this.accessors[key] = item[key];\n\t          }\n\t        }\n\t      } else {\n\t        this.accessors[item] = value;\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * This will extend a chart by passing in an object of initialize function.\n\t     * @param  {Object || function} init Initialize function of object with initialize method.\n\t     * @return {Construtor}      Chart constructor\n\t     */\n\t\n\t  }], [{\n\t    key: 'extend',\n\t    value: function extend(init) {\n\t      var chart = function (_ref) {\n\t        _inherits(chart, _ref);\n\t\n\t        function chart(selection) {\n\t          _classCallCheck(this, chart);\n\t\n\t          var key;\n\t\n\t          var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(chart).call(this, selection));\n\t\n\t          if (typeof init === 'function') {\n\t            init.call(_this3);\n\t          } else {\n\t            for (key in init) {\n\t              _this3[key] = init[key];\n\t            }\n\t            _this3.initialize.call(_this3);\n\t          }\n\t\n\t          return _this3;\n\t        }\n\t\n\t        return chart;\n\t      }(this);\n\t\n\t      return chart;\n\t    }\n\t  }]);\n\t\n\t  return Chart;\n\t}();\n\t\n\t/**\n\t* Expose the Layer class so that it can be subclassed.\n\t*/\n\t\n\t\n\tChart.Layer = _layer3.default;\n\t\n\t// run tests if on test environment\n\t// if (ON_TEST) {\n\t//   require('./assert.spec.js')(kotoAssert);\n\t//   require('./layer.spec.js')(Layer, Chart);\n\t//   require('./chart.spec.js')(Chart);\n\t// }\n\t\n\texports.default = Chart;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Simple Assertion function\n\t * @param  {anything} test    Anything that will evaluate to true of false.\n\t * @param  {string} message The error message to send if `test` is false\n\t */\n\tfunction kotoAssert(test, message) {\n\t  if (test) {\n\t    return;\n\t  }\n\t  throw new Error(\"[koto] \" + message);\n\t}\n\t\n\texports.default = kotoAssert;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _assert = __webpack_require__(1);\n\t\n\tvar _assert2 = _interopRequireDefault(_assert);\n\t\n\tvar _d3Selection = __webpack_require__(3);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar _d3 = { selection: _d3Selection.selection };\n\t/**\n\t * Create a layer using the provided `base` selection.\n\t *\n\t * @class\n\t *\n\t * @param {d3.selection} base The containing DOM node for the layer.\n\t * @param {Object} options Overrides for databind, insert and event methods.\n\t * @param {Function} options.databind databind override\n\t * @param {Function} options.insert insert override\n\t * @param {Function} [options.events] life-cycle event handler overrides.\n\t *                                  Possible values are [enter, update, merge, exit]\n\t *                                  with or without the 'transition postfix'.\n\t */\n\t\n\tvar Layer = function () {\n\t  function Layer(base, options) {\n\t    _classCallCheck(this, Layer);\n\t\n\t    this._base = base;\n\t    this._handlers = {};\n\t    this._lifecycleRe = /^(enter|update|merge|exit)(:transition)?$/;\n\t\n\t    if (options) {\n\t      // Set layer methods (required)\n\t      this.dataBind = options.dataBind;\n\t      this.insert = options.insert;\n\t\n\t      // Bind events (optional)\n\t      if ('events' in options) {\n\t        for (var eventName in options.events) {\n\t          this.on(eventName, options.events[eventName]);\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Invoked by {@link Layer#draw} to join data with this layer's DOM nodes. This\n\t   * implementation is \"virtual\"--it *must* be overridden by Layer instances.\n\t   *\n\t   * @param {Array} data Value passed to {@link Layer#draw}\n\t   * @param {Object} [context] the instance of this layers\n\t   */\n\t\n\t\n\t  _createClass(Layer, [{\n\t    key: 'dataBind',\n\t    value: function dataBind() {\n\t      (0, _assert2.default)(false, 'Layers must specify a dataBind method.');\n\t    }\n\t\n\t    /**\n\t     * Invoked by {@link Layer#draw} in order to insert new DOM nodes into this\n\t     * layer's `base`. This implementation is \"virtual\"--it *must* be overridden by\n\t     * Layer instances.\n\t     */\n\t\n\t  }, {\n\t    key: 'insert',\n\t    value: function insert() {\n\t      (0, _assert2.default)(false, 'Layers must specify an `insert` method.');\n\t    }\n\t\n\t    /**\n\t     * Subscribe a handler to a lifecycle event. These events (and only these\n\t     * events) are triggered when {@link Layer#draw} is invoked--see that method\n\t     * for more details on lifecycle events.\n\t     *\n\t     * @param {String} eventName Identifier for the lifecycle event for which to\n\t     *        subscribe.\n\t     * @param {Function} handler Callback function\n\t     *\n\t     * @returns {Chart} Reference to the layer instance (for chaining).\n\t     */\n\t\n\t  }, {\n\t    key: 'on',\n\t    value: function on(eventName, handler, options) {\n\t      options = options || {};\n\t\n\t      (0, _assert2.default)(this._lifecycleRe.test(eventName), 'Unrecognized lifecycle event name specified to \\'Layer#on\\': \\'' + eventName + '\\'.');\n\t\n\t      if (!(eventName in this._handlers)) {\n\t        this._handlers[eventName] = [];\n\t      }\n\t      this._handlers[eventName].push({\n\t        callback: handler,\n\t        chart: options.chart || null\n\t      });\n\t\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * Unsubscribe the specified handler from the specified event. If no handler is\n\t     * supplied, remove *all* handlers from the event.\n\t     *\n\t     * @param {String} eventName Identifier for event from which to remove\n\t     *        unsubscribe\n\t     * @param {Function} handler Callback to remove from the specified event\n\t     *\n\t     * @returns {Chart} Reference to the layer instance (for chaining).\n\t     */\n\t\n\t  }, {\n\t    key: 'off',\n\t    value: function off(eventName, handler) {\n\t      var handlers = this._handlers[eventName];\n\t      var idx;\n\t\n\t      (0, _assert2.default)(this._lifecycleRe.test(eventName), 'Unrecognized lifecycle event name specified to \\'Layer#on\\': \\'' + eventName + '\\'.');\n\t\n\t      if (!handlers) {\n\t        return this;\n\t      }\n\t\n\t      if (arguments.length === 1) {\n\t        handlers.length = 0;\n\t        return this;\n\t      }\n\t\n\t      for (idx = handlers.length - 1; idx > -1; --idx) {\n\t        if (handlers[idx].callback === handler) {\n\t          handlers.splice(idx, 1);\n\t        }\n\t      }\n\t\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * Render the layer according to the input data. Bind the data to the layer\n\t     * (according to {@link Layer#dataBind}, insert new elements (according to\n\t     * {@link Layer#insert}, make lifecycle selections, and invoke all relevant\n\t     * handlers (as attached via {@link Layer#on}) with the lifecycle selections.\n\t     *\n\t     * - update\n\t     * - update:transition\n\t     * - enter\n\t     * - enter:transition\n\t     * - exit\n\t     * - exit:transition\n\t     *\n\t     * @param {Array} data Data to drive the rendering.\n\t     */\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(data) {\n\t      var bound,\n\t          entering,\n\t          events,\n\t          selection,\n\t          method,\n\t          handlers,\n\t          eventName,\n\t          idx,\n\t          len,\n\t          tidx,\n\t          tlen,\n\t          promises = [];\n\t\n\t      function endall(transition, callback) {\n\t        var n = 0;\n\t        if (transition.size() === 0) {\n\t          callback();\n\t        } else {\n\t          transition.each(function () {\n\t            ++n;\n\t          }).on('interrupt.promise', function () {\n\t            callback.apply(this, arguments);\n\t          }).on('end.promise', function () {\n\t            if (! --n) {\n\t              callback.apply(this, arguments);\n\t            }\n\t          });\n\t        }\n\t      }\n\t\n\t      function promiseCallback(resolve) {\n\t        selection.call(endall, function () {\n\t          resolve(true);\n\t        });\n\t      }\n\t\n\t      bound = this.dataBind.call(this._base, data, this);\n\t\n\t      (0, _assert2.default)(bound instanceof _d3.selection, 'Invalid selection defined by `Layer#dataBind` method.');\n\t      (0, _assert2.default)(bound.enter, 'Layer selection not properly bound.');\n\t\n\t      entering = bound.enter();\n\t      entering._chart = this._base._chart;\n\t\n\t      events = [{\n\t        name: 'update',\n\t        selection: bound\n\t      }, {\n\t        name: 'enter',\n\t        selection: entering,\n\t        method: this.insert\n\t      }, {\n\t        name: 'merge',\n\t        // Although the `merge` lifecycle event shares its selection object\n\t        // with the `update` lifecycle event, the object's contents will be\n\t        // modified when koto invokes the user-supplied `insert` method\n\t        // when triggering the `enter` event.\n\t        selection: bound\n\t      }, {\n\t        name: 'exit',\n\t        // Although the `exit` lifecycle event shares its selection object\n\t        // with the `update` and `merge` lifecycle events, the object's\n\t        // contents will be modified when koto invokes\n\t        // `d3.selection.exit`.\n\t        selection: bound,\n\t        method: bound.exit\n\t      }];\n\t\n\t      for (var i = 0, l = events.length; i < l; ++i) {\n\t        eventName = events[i].name;\n\t        selection = events[i].selection;\n\t        method = events[i].method;\n\t\n\t        // Some lifecycle selections modify shared state, so they must be\n\t        // deferred until just prior to handler invocation.\n\t        if (typeof method === 'function') {\n\t          selection = method.call(selection, selection);\n\t        }\n\t\n\t        if (selection.empty()) {\n\t          continue;\n\t        }\n\t\n\t        (0, _assert2.default)(selection && selection instanceof _d3.selection, 'Invalid selection defined for ' + eventName + ' lifecycle event.');\n\t\n\t        handlers = this._handlers[eventName];\n\t\n\t        if (handlers) {\n\t          for (idx = 0, len = handlers.length; idx < len; ++idx) {\n\t            // Attach a reference to the parent chart so the selection's\n\t            // `chart` method will function correctly.\n\t            selection._chart = handlers[idx].chart || this._base._chart;\n\t            // selection.call(handlers[idx].callback);\n\t            handlers[idx].callback.call(selection, selection);\n\t          }\n\t        }\n\t\n\t        handlers = this._handlers[eventName + ':transition'];\n\t\n\t        if (handlers && handlers.length) {\n\t          selection = selection.transition();\n\t          for (tlen = handlers.length, tidx = 0; tidx < tlen; ++tidx) {\n\t            selection._chart = handlers[tidx].chart || this._base._chart;\n\t            // selection.call(handlers[tidx].callback);\n\t            handlers[tidx].callback.call(selection, selection);\n\t            promises.push(new Promise(promiseCallback));\n\t          }\n\t        }\n\t        this.promise = Promise.all(promises);\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Layer;\n\t}();\n\t\n\texports.default = Layer;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// https://d3js.org/d3-selection/ Version 1.0.0. Copyright 2016 Mike Bostock.\n\t(function (global, factory) {\n\t   true ? factory(exports) :\n\t  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t  (factory((global.d3 = global.d3 || {})));\n\t}(this, function (exports) { 'use strict';\n\t\n\t  var xhtml = \"http://www.w3.org/1999/xhtml\";\n\t\n\t  var namespaces = {\n\t    svg: \"http://www.w3.org/2000/svg\",\n\t    xhtml: xhtml,\n\t    xlink: \"http://www.w3.org/1999/xlink\",\n\t    xml: \"http://www.w3.org/XML/1998/namespace\",\n\t    xmlns: \"http://www.w3.org/2000/xmlns/\"\n\t  };\n\t\n\t  function namespace(name) {\n\t    var prefix = name += \"\", i = prefix.indexOf(\":\");\n\t    if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n\t    return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;\n\t  }\n\t\n\t  function creatorInherit(name) {\n\t    return function() {\n\t      var document = this.ownerDocument,\n\t          uri = this.namespaceURI;\n\t      return uri === xhtml && document.documentElement.namespaceURI === xhtml\n\t          ? document.createElement(name)\n\t          : document.createElementNS(uri, name);\n\t    };\n\t  }\n\t\n\t  function creatorFixed(fullname) {\n\t    return function() {\n\t      return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n\t    };\n\t  }\n\t\n\t  function creator(name) {\n\t    var fullname = namespace(name);\n\t    return (fullname.local\n\t        ? creatorFixed\n\t        : creatorInherit)(fullname);\n\t  }\n\t\n\t  var nextId = 0;\n\t\n\t  function local() {\n\t    return new Local;\n\t  }\n\t\n\t  function Local() {\n\t    this._ = \"@\" + (++nextId).toString(36);\n\t  }\n\t\n\t  Local.prototype = local.prototype = {\n\t    constructor: Local,\n\t    get: function(node) {\n\t      var id = this._;\n\t      while (!(id in node)) if (!(node = node.parentNode)) return;\n\t      return node[id];\n\t    },\n\t    set: function(node, value) {\n\t      return node[this._] = value;\n\t    },\n\t    remove: function(node) {\n\t      return this._ in node && delete node[this._];\n\t    },\n\t    toString: function() {\n\t      return this._;\n\t    }\n\t  };\n\t\n\t  var matcher = function(selector) {\n\t    return function() {\n\t      return this.matches(selector);\n\t    };\n\t  };\n\t\n\t  if (typeof document !== \"undefined\") {\n\t    var element = document.documentElement;\n\t    if (!element.matches) {\n\t      var vendorMatches = element.webkitMatchesSelector\n\t          || element.msMatchesSelector\n\t          || element.mozMatchesSelector\n\t          || element.oMatchesSelector;\n\t      matcher = function(selector) {\n\t        return function() {\n\t          return vendorMatches.call(this, selector);\n\t        };\n\t      };\n\t    }\n\t  }\n\t\n\t  var matcher$1 = matcher;\n\t\n\t  var filterEvents = {};\n\t\n\t  exports.event = null;\n\t\n\t  if (typeof document !== \"undefined\") {\n\t    var element$1 = document.documentElement;\n\t    if (!(\"onmouseenter\" in element$1)) {\n\t      filterEvents = {mouseenter: \"mouseover\", mouseleave: \"mouseout\"};\n\t    }\n\t  }\n\t\n\t  function filterContextListener(listener, index, group) {\n\t    listener = contextListener(listener, index, group);\n\t    return function(event) {\n\t      var related = event.relatedTarget;\n\t      if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {\n\t        listener.call(this, event);\n\t      }\n\t    };\n\t  }\n\t\n\t  function contextListener(listener, index, group) {\n\t    return function(event1) {\n\t      var event0 = exports.event; // Events can be reentrant (e.g., focus).\n\t      exports.event = event1;\n\t      try {\n\t        listener.call(this, this.__data__, index, group);\n\t      } finally {\n\t        exports.event = event0;\n\t      }\n\t    };\n\t  }\n\t\n\t  function parseTypenames(typenames) {\n\t    return typenames.trim().split(/^|\\s+/).map(function(t) {\n\t      var name = \"\", i = t.indexOf(\".\");\n\t      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n\t      return {type: t, name: name};\n\t    });\n\t  }\n\t\n\t  function onRemove(typename) {\n\t    return function() {\n\t      var on = this.__on;\n\t      if (!on) return;\n\t      for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n\t        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n\t          this.removeEventListener(o.type, o.listener, o.capture);\n\t        } else {\n\t          on[++i] = o;\n\t        }\n\t      }\n\t      if (++i) on.length = i;\n\t      else delete this.__on;\n\t    };\n\t  }\n\t\n\t  function onAdd(typename, value, capture) {\n\t    var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\n\t    return function(d, i, group) {\n\t      var on = this.__on, o, listener = wrap(value, i, group);\n\t      if (on) for (var j = 0, m = on.length; j < m; ++j) {\n\t        if ((o = on[j]).type === typename.type && o.name === typename.name) {\n\t          this.removeEventListener(o.type, o.listener, o.capture);\n\t          this.addEventListener(o.type, o.listener = listener, o.capture = capture);\n\t          o.value = value;\n\t          return;\n\t        }\n\t      }\n\t      this.addEventListener(typename.type, listener, capture);\n\t      o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};\n\t      if (!on) this.__on = [o];\n\t      else on.push(o);\n\t    };\n\t  }\n\t\n\t  function selection_on(typename, value, capture) {\n\t    var typenames = parseTypenames(typename + \"\"), i, n = typenames.length, t;\n\t\n\t    if (arguments.length < 2) {\n\t      var on = this.node().__on;\n\t      if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n\t        for (i = 0, o = on[j]; i < n; ++i) {\n\t          if ((t = typenames[i]).type === o.type && t.name === o.name) {\n\t            return o.value;\n\t          }\n\t        }\n\t      }\n\t      return;\n\t    }\n\t\n\t    on = value ? onAdd : onRemove;\n\t    if (capture == null) capture = false;\n\t    for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));\n\t    return this;\n\t  }\n\t\n\t  function customEvent(event1, listener, that, args) {\n\t    var event0 = exports.event;\n\t    event1.sourceEvent = exports.event;\n\t    exports.event = event1;\n\t    try {\n\t      return listener.apply(that, args);\n\t    } finally {\n\t      exports.event = event0;\n\t    }\n\t  }\n\t\n\t  function sourceEvent() {\n\t    var current = exports.event, source;\n\t    while (source = current.sourceEvent) current = source;\n\t    return current;\n\t  }\n\t\n\t  function point(node, event) {\n\t    var svg = node.ownerSVGElement || node;\n\t\n\t    if (svg.createSVGPoint) {\n\t      var point = svg.createSVGPoint();\n\t      point.x = event.clientX, point.y = event.clientY;\n\t      point = point.matrixTransform(node.getScreenCTM().inverse());\n\t      return [point.x, point.y];\n\t    }\n\t\n\t    var rect = node.getBoundingClientRect();\n\t    return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n\t  }\n\t\n\t  function mouse(node) {\n\t    var event = sourceEvent();\n\t    if (event.changedTouches) event = event.changedTouches[0];\n\t    return point(node, event);\n\t  }\n\t\n\t  function none() {}\n\t\n\t  function selector(selector) {\n\t    return selector == null ? none : function() {\n\t      return this.querySelector(selector);\n\t    };\n\t  }\n\t\n\t  function selection_select(select) {\n\t    if (typeof select !== \"function\") select = selector(select);\n\t\n\t    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n\t      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n\t        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n\t          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n\t          subgroup[i] = subnode;\n\t        }\n\t      }\n\t    }\n\t\n\t    return new Selection(subgroups, this._parents);\n\t  }\n\t\n\t  function empty() {\n\t    return [];\n\t  }\n\t\n\t  function selectorAll(selector) {\n\t    return selector == null ? empty : function() {\n\t      return this.querySelectorAll(selector);\n\t    };\n\t  }\n\t\n\t  function selection_selectAll(select) {\n\t    if (typeof select !== \"function\") select = selectorAll(select);\n\t\n\t    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n\t      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n\t        if (node = group[i]) {\n\t          subgroups.push(select.call(node, node.__data__, i, group));\n\t          parents.push(node);\n\t        }\n\t      }\n\t    }\n\t\n\t    return new Selection(subgroups, parents);\n\t  }\n\t\n\t  function selection_filter(match) {\n\t    if (typeof match !== \"function\") match = matcher$1(match);\n\t\n\t    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n\t      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n\t        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n\t          subgroup.push(node);\n\t        }\n\t      }\n\t    }\n\t\n\t    return new Selection(subgroups, this._parents);\n\t  }\n\t\n\t  function sparse(update) {\n\t    return new Array(update.length);\n\t  }\n\t\n\t  function selection_enter() {\n\t    return new Selection(this._enter || this._groups.map(sparse), this._parents);\n\t  }\n\t\n\t  function EnterNode(parent, datum) {\n\t    this.ownerDocument = parent.ownerDocument;\n\t    this.namespaceURI = parent.namespaceURI;\n\t    this._next = null;\n\t    this._parent = parent;\n\t    this.__data__ = datum;\n\t  }\n\t\n\t  EnterNode.prototype = {\n\t    constructor: EnterNode,\n\t    appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n\t    insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n\t    querySelector: function(selector) { return this._parent.querySelector(selector); },\n\t    querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n\t  };\n\t\n\t  function constant(x) {\n\t    return function() {\n\t      return x;\n\t    };\n\t  }\n\t\n\t  var keyPrefix = \"$\"; // Protect against keys like “__proto__”.\n\t\n\t  function bindIndex(parent, group, enter, update, exit, data) {\n\t    var i = 0,\n\t        node,\n\t        groupLength = group.length,\n\t        dataLength = data.length;\n\t\n\t    // Put any non-null nodes that fit into update.\n\t    // Put any null nodes into enter.\n\t    // Put any remaining data into enter.\n\t    for (; i < dataLength; ++i) {\n\t      if (node = group[i]) {\n\t        node.__data__ = data[i];\n\t        update[i] = node;\n\t      } else {\n\t        enter[i] = new EnterNode(parent, data[i]);\n\t      }\n\t    }\n\t\n\t    // Put any non-null nodes that don’t fit into exit.\n\t    for (; i < groupLength; ++i) {\n\t      if (node = group[i]) {\n\t        exit[i] = node;\n\t      }\n\t    }\n\t  }\n\t\n\t  function bindKey(parent, group, enter, update, exit, data, key) {\n\t    var i,\n\t        node,\n\t        nodeByKeyValue = {},\n\t        groupLength = group.length,\n\t        dataLength = data.length,\n\t        keyValues = new Array(groupLength),\n\t        keyValue;\n\t\n\t    // Compute the key for each node.\n\t    // If multiple nodes have the same key, the duplicates are added to exit.\n\t    for (i = 0; i < groupLength; ++i) {\n\t      if (node = group[i]) {\n\t        keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);\n\t        if (keyValue in nodeByKeyValue) {\n\t          exit[i] = node;\n\t        } else {\n\t          nodeByKeyValue[keyValue] = node;\n\t        }\n\t      }\n\t    }\n\t\n\t    // Compute the key for each datum.\n\t    // If there a node associated with this key, join and add it to update.\n\t    // If there is not (or the key is a duplicate), add it to enter.\n\t    for (i = 0; i < dataLength; ++i) {\n\t      keyValue = keyPrefix + key.call(parent, data[i], i, data);\n\t      if (node = nodeByKeyValue[keyValue]) {\n\t        update[i] = node;\n\t        node.__data__ = data[i];\n\t        nodeByKeyValue[keyValue] = null;\n\t      } else {\n\t        enter[i] = new EnterNode(parent, data[i]);\n\t      }\n\t    }\n\t\n\t    // Add any remaining nodes that were not bound to data to exit.\n\t    for (i = 0; i < groupLength; ++i) {\n\t      if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {\n\t        exit[i] = node;\n\t      }\n\t    }\n\t  }\n\t\n\t  function selection_data(value, key) {\n\t    if (!value) {\n\t      data = new Array(this.size()), j = -1;\n\t      this.each(function(d) { data[++j] = d; });\n\t      return data;\n\t    }\n\t\n\t    var bind = key ? bindKey : bindIndex,\n\t        parents = this._parents,\n\t        groups = this._groups;\n\t\n\t    if (typeof value !== \"function\") value = constant(value);\n\t\n\t    for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n\t      var parent = parents[j],\n\t          group = groups[j],\n\t          groupLength = group.length,\n\t          data = value.call(parent, parent && parent.__data__, j, parents),\n\t          dataLength = data.length,\n\t          enterGroup = enter[j] = new Array(dataLength),\n\t          updateGroup = update[j] = new Array(dataLength),\n\t          exitGroup = exit[j] = new Array(groupLength);\n\t\n\t      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\t\n\t      // Now connect the enter nodes to their following update node, such that\n\t      // appendChild can insert the materialized enter node before this node,\n\t      // rather than at the end of the parent node.\n\t      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n\t        if (previous = enterGroup[i0]) {\n\t          if (i0 >= i1) i1 = i0 + 1;\n\t          while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n\t          previous._next = next || null;\n\t        }\n\t      }\n\t    }\n\t\n\t    update = new Selection(update, parents);\n\t    update._enter = enter;\n\t    update._exit = exit;\n\t    return update;\n\t  }\n\t\n\t  function selection_exit() {\n\t    return new Selection(this._exit || this._groups.map(sparse), this._parents);\n\t  }\n\t\n\t  function selection_merge(selection) {\n\t\n\t    for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n\t      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n\t        if (node = group0[i] || group1[i]) {\n\t          merge[i] = node;\n\t        }\n\t      }\n\t    }\n\t\n\t    for (; j < m0; ++j) {\n\t      merges[j] = groups0[j];\n\t    }\n\t\n\t    return new Selection(merges, this._parents);\n\t  }\n\t\n\t  function selection_order() {\n\t\n\t    for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n\t      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n\t        if (node = group[i]) {\n\t          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n\t          next = node;\n\t        }\n\t      }\n\t    }\n\t\n\t    return this;\n\t  }\n\t\n\t  function selection_sort(compare) {\n\t    if (!compare) compare = ascending;\n\t\n\t    function compareNode(a, b) {\n\t      return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n\t    }\n\t\n\t    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n\t      for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n\t        if (node = group[i]) {\n\t          sortgroup[i] = node;\n\t        }\n\t      }\n\t      sortgroup.sort(compareNode);\n\t    }\n\t\n\t    return new Selection(sortgroups, this._parents).order();\n\t  }\n\t\n\t  function ascending(a, b) {\n\t    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n\t  }\n\t\n\t  function selection_call() {\n\t    var callback = arguments[0];\n\t    arguments[0] = this;\n\t    callback.apply(null, arguments);\n\t    return this;\n\t  }\n\t\n\t  function selection_nodes() {\n\t    var nodes = new Array(this.size()), i = -1;\n\t    this.each(function() { nodes[++i] = this; });\n\t    return nodes;\n\t  }\n\t\n\t  function selection_node() {\n\t\n\t    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n\t      for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n\t        var node = group[i];\n\t        if (node) return node;\n\t      }\n\t    }\n\t\n\t    return null;\n\t  }\n\t\n\t  function selection_size() {\n\t    var size = 0;\n\t    this.each(function() { ++size; });\n\t    return size;\n\t  }\n\t\n\t  function selection_empty() {\n\t    return !this.node();\n\t  }\n\t\n\t  function selection_each(callback) {\n\t\n\t    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n\t      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n\t        if (node = group[i]) callback.call(node, node.__data__, i, group);\n\t      }\n\t    }\n\t\n\t    return this;\n\t  }\n\t\n\t  function attrRemove(name) {\n\t    return function() {\n\t      this.removeAttribute(name);\n\t    };\n\t  }\n\t\n\t  function attrRemoveNS(fullname) {\n\t    return function() {\n\t      this.removeAttributeNS(fullname.space, fullname.local);\n\t    };\n\t  }\n\t\n\t  function attrConstant(name, value) {\n\t    return function() {\n\t      this.setAttribute(name, value);\n\t    };\n\t  }\n\t\n\t  function attrConstantNS(fullname, value) {\n\t    return function() {\n\t      this.setAttributeNS(fullname.space, fullname.local, value);\n\t    };\n\t  }\n\t\n\t  function attrFunction(name, value) {\n\t    return function() {\n\t      var v = value.apply(this, arguments);\n\t      if (v == null) this.removeAttribute(name);\n\t      else this.setAttribute(name, v);\n\t    };\n\t  }\n\t\n\t  function attrFunctionNS(fullname, value) {\n\t    return function() {\n\t      var v = value.apply(this, arguments);\n\t      if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n\t      else this.setAttributeNS(fullname.space, fullname.local, v);\n\t    };\n\t  }\n\t\n\t  function selection_attr(name, value) {\n\t    var fullname = namespace(name);\n\t\n\t    if (arguments.length < 2) {\n\t      var node = this.node();\n\t      return fullname.local\n\t          ? node.getAttributeNS(fullname.space, fullname.local)\n\t          : node.getAttribute(fullname);\n\t    }\n\t\n\t    return this.each((value == null\n\t        ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\n\t        ? (fullname.local ? attrFunctionNS : attrFunction)\n\t        : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n\t  }\n\t\n\t  function defaultView(node) {\n\t    return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n\t        || (node.document && node) // node is a Window\n\t        || node.defaultView; // node is a Document\n\t  }\n\t\n\t  function styleRemove(name) {\n\t    return function() {\n\t      this.style.removeProperty(name);\n\t    };\n\t  }\n\t\n\t  function styleConstant(name, value, priority) {\n\t    return function() {\n\t      this.style.setProperty(name, value, priority);\n\t    };\n\t  }\n\t\n\t  function styleFunction(name, value, priority) {\n\t    return function() {\n\t      var v = value.apply(this, arguments);\n\t      if (v == null) this.style.removeProperty(name);\n\t      else this.style.setProperty(name, v, priority);\n\t    };\n\t  }\n\t\n\t  function selection_style(name, value, priority) {\n\t    var node;\n\t    return arguments.length > 1\n\t        ? this.each((value == null\n\t              ? styleRemove : typeof value === \"function\"\n\t              ? styleFunction\n\t              : styleConstant)(name, value, priority == null ? \"\" : priority))\n\t        : defaultView(node = this.node())\n\t            .getComputedStyle(node, null)\n\t            .getPropertyValue(name);\n\t  }\n\t\n\t  function propertyRemove(name) {\n\t    return function() {\n\t      delete this[name];\n\t    };\n\t  }\n\t\n\t  function propertyConstant(name, value) {\n\t    return function() {\n\t      this[name] = value;\n\t    };\n\t  }\n\t\n\t  function propertyFunction(name, value) {\n\t    return function() {\n\t      var v = value.apply(this, arguments);\n\t      if (v == null) delete this[name];\n\t      else this[name] = v;\n\t    };\n\t  }\n\t\n\t  function selection_property(name, value) {\n\t    return arguments.length > 1\n\t        ? this.each((value == null\n\t            ? propertyRemove : typeof value === \"function\"\n\t            ? propertyFunction\n\t            : propertyConstant)(name, value))\n\t        : this.node()[name];\n\t  }\n\t\n\t  function classArray(string) {\n\t    return string.trim().split(/^|\\s+/);\n\t  }\n\t\n\t  function classList(node) {\n\t    return node.classList || new ClassList(node);\n\t  }\n\t\n\t  function ClassList(node) {\n\t    this._node = node;\n\t    this._names = classArray(node.getAttribute(\"class\") || \"\");\n\t  }\n\t\n\t  ClassList.prototype = {\n\t    add: function(name) {\n\t      var i = this._names.indexOf(name);\n\t      if (i < 0) {\n\t        this._names.push(name);\n\t        this._node.setAttribute(\"class\", this._names.join(\" \"));\n\t      }\n\t    },\n\t    remove: function(name) {\n\t      var i = this._names.indexOf(name);\n\t      if (i >= 0) {\n\t        this._names.splice(i, 1);\n\t        this._node.setAttribute(\"class\", this._names.join(\" \"));\n\t      }\n\t    },\n\t    contains: function(name) {\n\t      return this._names.indexOf(name) >= 0;\n\t    }\n\t  };\n\t\n\t  function classedAdd(node, names) {\n\t    var list = classList(node), i = -1, n = names.length;\n\t    while (++i < n) list.add(names[i]);\n\t  }\n\t\n\t  function classedRemove(node, names) {\n\t    var list = classList(node), i = -1, n = names.length;\n\t    while (++i < n) list.remove(names[i]);\n\t  }\n\t\n\t  function classedTrue(names) {\n\t    return function() {\n\t      classedAdd(this, names);\n\t    };\n\t  }\n\t\n\t  function classedFalse(names) {\n\t    return function() {\n\t      classedRemove(this, names);\n\t    };\n\t  }\n\t\n\t  function classedFunction(names, value) {\n\t    return function() {\n\t      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n\t    };\n\t  }\n\t\n\t  function selection_classed(name, value) {\n\t    var names = classArray(name + \"\");\n\t\n\t    if (arguments.length < 2) {\n\t      var list = classList(this.node()), i = -1, n = names.length;\n\t      while (++i < n) if (!list.contains(names[i])) return false;\n\t      return true;\n\t    }\n\t\n\t    return this.each((typeof value === \"function\"\n\t        ? classedFunction : value\n\t        ? classedTrue\n\t        : classedFalse)(names, value));\n\t  }\n\t\n\t  function textRemove() {\n\t    this.textContent = \"\";\n\t  }\n\t\n\t  function textConstant(value) {\n\t    return function() {\n\t      this.textContent = value;\n\t    };\n\t  }\n\t\n\t  function textFunction(value) {\n\t    return function() {\n\t      var v = value.apply(this, arguments);\n\t      this.textContent = v == null ? \"\" : v;\n\t    };\n\t  }\n\t\n\t  function selection_text(value) {\n\t    return arguments.length\n\t        ? this.each(value == null\n\t            ? textRemove : (typeof value === \"function\"\n\t            ? textFunction\n\t            : textConstant)(value))\n\t        : this.node().textContent;\n\t  }\n\t\n\t  function htmlRemove() {\n\t    this.innerHTML = \"\";\n\t  }\n\t\n\t  function htmlConstant(value) {\n\t    return function() {\n\t      this.innerHTML = value;\n\t    };\n\t  }\n\t\n\t  function htmlFunction(value) {\n\t    return function() {\n\t      var v = value.apply(this, arguments);\n\t      this.innerHTML = v == null ? \"\" : v;\n\t    };\n\t  }\n\t\n\t  function selection_html(value) {\n\t    return arguments.length\n\t        ? this.each(value == null\n\t            ? htmlRemove : (typeof value === \"function\"\n\t            ? htmlFunction\n\t            : htmlConstant)(value))\n\t        : this.node().innerHTML;\n\t  }\n\t\n\t  function raise() {\n\t    if (this.nextSibling) this.parentNode.appendChild(this);\n\t  }\n\t\n\t  function selection_raise() {\n\t    return this.each(raise);\n\t  }\n\t\n\t  function lower() {\n\t    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n\t  }\n\t\n\t  function selection_lower() {\n\t    return this.each(lower);\n\t  }\n\t\n\t  function selection_append(name) {\n\t    var create = typeof name === \"function\" ? name : creator(name);\n\t    return this.select(function() {\n\t      return this.appendChild(create.apply(this, arguments));\n\t    });\n\t  }\n\t\n\t  function constantNull() {\n\t    return null;\n\t  }\n\t\n\t  function selection_insert(name, before) {\n\t    var create = typeof name === \"function\" ? name : creator(name),\n\t        select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n\t    return this.select(function() {\n\t      return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n\t    });\n\t  }\n\t\n\t  function remove() {\n\t    var parent = this.parentNode;\n\t    if (parent) parent.removeChild(this);\n\t  }\n\t\n\t  function selection_remove() {\n\t    return this.each(remove);\n\t  }\n\t\n\t  function selection_datum(value) {\n\t    return arguments.length\n\t        ? this.property(\"__data__\", value)\n\t        : this.node().__data__;\n\t  }\n\t\n\t  function dispatchEvent(node, type, params) {\n\t    var window = defaultView(node),\n\t        event = window.CustomEvent;\n\t\n\t    if (event) {\n\t      event = new event(type, params);\n\t    } else {\n\t      event = window.document.createEvent(\"Event\");\n\t      if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n\t      else event.initEvent(type, false, false);\n\t    }\n\t\n\t    node.dispatchEvent(event);\n\t  }\n\t\n\t  function dispatchConstant(type, params) {\n\t    return function() {\n\t      return dispatchEvent(this, type, params);\n\t    };\n\t  }\n\t\n\t  function dispatchFunction(type, params) {\n\t    return function() {\n\t      return dispatchEvent(this, type, params.apply(this, arguments));\n\t    };\n\t  }\n\t\n\t  function selection_dispatch(type, params) {\n\t    return this.each((typeof params === \"function\"\n\t        ? dispatchFunction\n\t        : dispatchConstant)(type, params));\n\t  }\n\t\n\t  var root = [null];\n\t\n\t  function Selection(groups, parents) {\n\t    this._groups = groups;\n\t    this._parents = parents;\n\t  }\n\t\n\t  function selection() {\n\t    return new Selection([[document.documentElement]], root);\n\t  }\n\t\n\t  Selection.prototype = selection.prototype = {\n\t    constructor: Selection,\n\t    select: selection_select,\n\t    selectAll: selection_selectAll,\n\t    filter: selection_filter,\n\t    data: selection_data,\n\t    enter: selection_enter,\n\t    exit: selection_exit,\n\t    merge: selection_merge,\n\t    order: selection_order,\n\t    sort: selection_sort,\n\t    call: selection_call,\n\t    nodes: selection_nodes,\n\t    node: selection_node,\n\t    size: selection_size,\n\t    empty: selection_empty,\n\t    each: selection_each,\n\t    attr: selection_attr,\n\t    style: selection_style,\n\t    property: selection_property,\n\t    classed: selection_classed,\n\t    text: selection_text,\n\t    html: selection_html,\n\t    raise: selection_raise,\n\t    lower: selection_lower,\n\t    append: selection_append,\n\t    insert: selection_insert,\n\t    remove: selection_remove,\n\t    datum: selection_datum,\n\t    on: selection_on,\n\t    dispatch: selection_dispatch\n\t  };\n\t\n\t  function select(selector) {\n\t    return typeof selector === \"string\"\n\t        ? new Selection([[document.querySelector(selector)]], [document.documentElement])\n\t        : new Selection([[selector]], root);\n\t  }\n\t\n\t  function selectAll(selector) {\n\t    return typeof selector === \"string\"\n\t        ? new Selection([document.querySelectorAll(selector)], [document.documentElement])\n\t        : new Selection([selector == null ? [] : selector], root);\n\t  }\n\t\n\t  function touch(node, touches, identifier) {\n\t    if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;\n\t\n\t    for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {\n\t      if ((touch = touches[i]).identifier === identifier) {\n\t        return point(node, touch);\n\t      }\n\t    }\n\t\n\t    return null;\n\t  }\n\t\n\t  function touches(node, touches) {\n\t    if (touches == null) touches = sourceEvent().touches;\n\t\n\t    for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {\n\t      points[i] = point(node, touches[i]);\n\t    }\n\t\n\t    return points;\n\t  }\n\t\n\t  exports.creator = creator;\n\t  exports.local = local;\n\t  exports.matcher = matcher$1;\n\t  exports.mouse = mouse;\n\t  exports.namespace = namespace;\n\t  exports.namespaces = namespaces;\n\t  exports.select = select;\n\t  exports.selectAll = selectAll;\n\t  exports.selection = selection;\n\t  exports.selector = selector;\n\t  exports.selectorAll = selectorAll;\n\t  exports.touch = touch;\n\t  exports.touches = touches;\n\t  exports.window = defaultView;\n\t  exports.customEvent = customEvent;\n\t\n\t  Object.defineProperty(exports, '__esModule', { value: true });\n\t\n\t}));\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** koto.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 0875920844a39b89fb47\n **/","import kotoAssert from './assert.js';\nimport Layer from './layer.js';\n\n/**\n * Create a koto chart\n *\n * @constructor\n *\n * @param {d3.selection} selection The chart's \"base\" DOM node. This should\n *        contain any nodes that the chart generates.\n */\nclass Chart {\n  constructor(selection) {\n    this.base = selection; // Container for chart @type {d3.selection}.\n    this.hasDrawn = false; // Has this chart been drawn at least once?\n\n    this.merge = {};\n    this.merge.configs = (...args) => {\n      this.configs = Object.assign({}, this.configs, ...args);\n      return this.configs;\n    };\n    this.merge.accessors = (...args) => {\n      this.accessors = Object.assign({}, this.accessors, ...args);\n      return this.accessors;\n    };\n\n    // exposed properties\n    this.configs = {};\n    this.accessors = {};\n    this.promise = null;\n\n    // private\n    this._layers = new Map();\n    this._attached = new Map();\n    this._events = new Map();\n\n    // alias\n    this.c = this.config;\n    this.a = this.accessor;\n  }\n\n  /**\n   * A \"hook\" method that you may define to modify input data before it is used\n   * to draw the chart's layers and attachments. This method will be used by all\n   * sub-classes. You may optionally return a promise if your data transformation\n   * is asynchronous (i.e. you're using web workers).\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on koto to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * @param {Array} data Input data provided to @link Chart#draw}.\n   * @returns {mixed} Data to be used in drawing the chart's layers and\n   *                  attachments.\n   */\n  transform(data) { return data; }\n\n  /**\n   * A \"hook\" method that you may define to choose which mutation of the input\n   * data is sent to which of the attached charts (by name). This method will\n   * be used by all sub-classes. This only applies to charts that use the\n   * {@link Chart#attach} method.\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on koto to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * @param {String} data Name of attached chart defined in {@link Chart#attach}.\n   * @param {Array} data Input data provided to {@link Chart#draw}.\n   * @returns {mixed} Data to be used in drawing the chart's layers and\n   *                  attachments.\n   */\n  demux(name, data) { return data; }\n\n  /**\n   * A \"hook\" method that will allow you to run some arbitrary code before\n   * {@link Chart#draw}. This will run every time {@link Chart#draw} is called.\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on koto to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * Note 2: a `postDraw` event is also fired when appropriate;\n   *\n   * @param  {[type]} data [description]\n   * @return {[type]}      [description]\n   */\n  preDraw() {}\n\n  /**\n   * A \"hook\" method that will allow you to run some arbitrary code after\n   * {@link Chart#draw}. This will run every time {@link Chart#draw} is called.\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on koto to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * @param  {[type]} data [description]\n   */\n  postDraw() {}\n\n  /**\n   * A \"hook\" method that will allow you to run some arbitrary code after\n   * {@link Chart#draw} is called AND after all transitions for all layers\n   * and attached charts have been completed. This will run every time\n   * {@link Chart#draw} is called.\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on koto to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * Note 2: a `postTransition` event is also fired when appropriate;\n   *\n   * @param  {[type]} data\n   */\n  postTransition() {}\n\n  /**\n   * Remove a layer from the chart.\n   *\n   * @param {String} name The name of the layer to remove.\n   * @returns {Layer} The layer removed by this operation.\n   */\n  unlayer(name) {\n    var layer = this.layer(name);\n\n    this._layers.delete(name);\n    delete layer._chart;\n\n    return layer;\n  }\n\n  /**\n   * Interact with the chart's {@link Layer|layers}.\n   *\n   * If only a `name` is provided, simply return the layer registered to that\n   * name (if any).\n   *\n   * If a `name` and `selection` are provided, treat the `selection` as a\n   * previously-created layer and attach it to the chart with the specified\n   * `name`.\n   *\n   * If all three arguments are specified, initialize a new {@link Layer} using\n   * the specified `selection` as a base passing along the specified `options`.\n   *\n   * The {@link Layer.draw} method of attached layers will be invoked\n   * whenever this chart's {@link Chart#draw} is invoked and will receive the\n   * data (optionally modified by the chart's {@link Chart#transform} method.\n   *\n   * @param {String} name Name of the layer to attach or retrieve.\n   * @param {d3.selection|Layer} [selection] The layer's base or a\n   *        previously-created {@link Layer}.\n   * @param {Object} [options] Options to be forwarded to {@link Layer|the Layer\n   *        constructor}\n   *\n   * @returns {Layer}\n   */\n  layer(name, selection, options) {\n    var _Chart = this;\n    var _layer;\n\n    if (arguments.length === 1) {\n      return this._layers.get(name);\n    }\n\n    // we are reattaching a previous layer, which the\n    // selection argument is now set to.\n    if (arguments.length === 2) {\n\n      if (selection instanceof Layer) {\n        selection._chart = this;\n        this._layers.set(name, selection);\n        return this._layers.get(name);\n\n      } else {\n        kotoAssert(false, 'When reattaching a layer, the second argument must be a koto layer');\n      }\n    }\n\n    selection._chart = this;\n\n    _layer = new Layer(selection, options);\n\n    _layer.remove = function () {\n      _Chart._layers.delete(name);\n      return this;\n    };\n\n    this._layers.set(name, _layer);\n\n    return _layer;\n  }\n\n  /**\n   * Register or retrieve an \"attachment\" Chart. The \"attachment\" chart's `draw`\n   * method will be invoked whenever the containing chart's `draw` method is\n   * invoked.\n   *\n   * @param {String} attachmentName Name of the attachment\n   * @param {Chart} [chart] koto to register as a mix in of this chart. When\n   *        unspecified, this method will return the attachment previously\n   *        registered with the specified `attachmentName` (if any).\n   *\n   * @returns {Chart} Reference to this chart (chainable).\n   */\n  attach(attachmentName, chart) {\n    if (arguments.length === 1) {\n      return this._attached.get(attachmentName);\n    }\n\n    this._attached.set(attachmentName, chart);\n    return chart;\n  }\n\n  /**\n   * Update the chart's representation in the DOM, drawing all of its layers and\n   * any \"attachment\" charts (as attached via {@link Chart#attach}).\n   *\n   * Note: The first time you call this method, the property `hasDrawn` will be\n   * set to true. This is helpful if you want to only run some code on the first\n   * time the chart is drawn.\n   *\n   * @param {Object} data Data to pass to the {@link Layer#draw|draw method} of\n   *        this cart's {@link Layer|layers} (if any) and the {@link\n   *        Chart#draw|draw method} of this chart's attachments (if any).\n   */\n  draw(rawData) {\n    var layer, attachmentData, promises = [];\n\n    return Promise.resolve(this.transform(rawData))\n      .then((data) => {\n        this.preDraw(data);\n        this.trigger('preDraw', data);\n\n        for (layer of this._layers.values()) {\n          layer.draw(data);\n          promises.push(layer.promise);\n        }\n\n        for (var [attachmentName, attachment] of this._attached.entries()) {\n          attachmentData = this.demux ? this.demux(attachmentName, data) : data;\n          attachment.draw(attachmentData);\n          promises.push(attachment.promise);\n        }\n\n        this.hasDrawn = true;\n\n        this.promise = Promise.all(promises);\n\n        this.postDraw();\n        this.trigger('postDraw', data);\n\n        this.promise.then(() => {\n          this.postTransition(data);\n          this.trigger('postTransition', data);\n        });\n\n        return data;\n      });\n  }\n\n  /**\n   * Subscribe a callback function to an event triggered on the chart. See {@link\n   * Chart#once} to subscribe a callback function to an event for one occurrence.\n   *\n   * @externalExample {runnable} chart-on\n   *\n   * @param {String} name Name of the event\n   * @param {ChartEventHandler} callback Function to be invoked when the event\n   *        occurs\n   * @param {Object} [context] Value to set as `this` when invoking the\n   *        `callback`. Defaults to the chart instance.\n   *\n   * @returns {Chart} A reference to this chart (chainable).\n   */\n  on(name, callback, context) {\n    var events;\n    if (this._events.has(name)) {\n      events = this._events.get(name);\n    } else {\n      events = new Set();\n    }\n\n    events.add({\n      callback: callback,\n      context: context || this,\n      _chart: this\n    });\n\n    this._events.set(name, events);\n    return this;\n  }\n\n  /**\n   * Subscribe a callback function to an event triggered on the chart. This\n   * function will be invoked at the next occurrence of the event and immediately\n   * unsubscribed. See {@link Chart#on} to subscribe a callback function to an\n   * event indefinitely.\n   *\n   * @externalExample {runnable} chart-once\n   *\n   * @param {String} name Name of the event\n   * @param {ChartEventHandler} callback Function to be invoked when the event\n   *        occurs\n   * @param {Object} [context] Value to set as `this` when invoking the\n   *        `callback`. Defaults to the chart instance\n   *\n   * @returns {Chart} A reference to this chart (chainable)\n   */\n  once(name, callback, context) {\n    var self = this;\n    var _once = function() {\n      self.off(name, _once);\n      callback.apply(this, arguments);\n    };\n    return this.on(name, _once, context);\n  }\n\n  /**\n   * Unsubscribe one or more callback functions from an event triggered on the\n   * chart. When no arguments are specified, *all* handlers will be unsubscribed.\n   * When only a `name` is specified, all handlers subscribed to that event will\n   * be unsubscribed. When a `name` and `callback` are specified, only that\n   * function will be unsubscribed from that event. When a `name` and `context`\n   * are specified (but `callback` is omitted), all events bound to the given\n   * event with the given context will be unsubscribed.\n   *\n   * @externalExample {runnable} chart-off\n   *\n   * @param {String} [name] Name of the event to be unsubscribed\n   * @param {ChartEventHandler} [callback] Function to be unsubscribed\n   * @param {Object} [context] Contexts to be unsubscribed\n   *\n   * @returns {Chart} A reference to this chart (chainable).\n   */\n  off(name, callback, context) {\n\n    // remove all events\n    if (arguments.length === 0) {\n      this._events.clear();\n      return this;\n    }\n\n    // remove all events for a specific name\n    if (arguments.length === 1) {\n      if (this._events.has(name)) {\n        this._events.get(name).clear();\n      }\n      return this;\n    }\n\n    // remove all events that match whatever combination of name, context\n    // and callback.\n\n    this._events.get(name).forEach((event, clone, map) => {\n      if ((callback && callback === clone.callback) ||\n          (context && context === clone.context)) {\n        map.delete(event);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Publish an event on this chart with the given `name`.\n   *\n   * @externalExample {runnable} chart-trigger\n   *\n   * @param {String} name Name of the event to publish\n   * @param {...*} arguments Values with which to invoke the registered\n   *        callbacks.\n   *\n   * @returns {Chart} A reference to this chart (chainable).\n   */\n  trigger(name, ...args) {\n    if (this._events.has(name)) {\n      this._events.get(name).forEach((event) => {\n        event.callback.call(event.context, ...args);\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Cleanly dispose of chart\n   *\n   * @return undefined\n   */\n  destroy() {\n    var node = this.base.node();\n\n    // exposed properties\n    this.configs = {};\n    this.accessors = {};\n    this.promise = null;\n\n    // clear up remaining data\n    this._layers.clear();\n    this._attached.clear();\n    this._events.clear();\n\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  }\n\n  /**\n   * Get and set chart options (or configs)\n   *\n   * @param  {mixed} nameOrObject Name of item getting or setting\n   *                              or an object with key-value pairs.\n   * @param  {mixed} value The value for config item with that name.\n   * @return {mixed} if getting: the value. if setting: the chart instance.\n   */\n  config(nameOrObject, value) {\n    var key;\n    var definition;\n    var _Chart = this;\n\n    function setPercentage () {\n      function calculatePercentage (arr, initialValue) {\n        var min = Math.min.call(null, arr.map(function (name) { return _Chart.config(name); }));\n        return initialValue / min;\n      }\n\n      if (definition.constrain === true) {\n        definition.percentage = calculatePercentage(['width', 'height'], definition.value);\n      } else if (Array.isArray(definition.constrain)) {\n        definition.percentage = calculatePercentage(definition.constrain, definition.value);\n      } else {\n        definition.percentage = calculatePercentage([definition.constrain], definition.value);\n      }\n    }\n\n    if (arguments.length === 0) {\n      return this.configs;\n    }\n\n    if (arguments.length === 1) {\n      if (typeof nameOrObject === 'object') {\n        for (key in nameOrObject) {\n          if(this.configs.hasOwnProperty(key)) {\n            definition = this.configs[key];\n            if (definition.hasOwnProperty('setter')) {\n              definition.value = definition.setter.call(definition, nameOrObject[key]);\n            } else {\n              definition.value = nameOrObject[key];\n            }\n            if (definition.hasOwnProperty('constrain')) {\n              setPercentage();\n            }\n            this.configs[key] = definition;\n          } else {\n            console.warn(`config with name ${nameOrObject} is not defined.`);\n          }\n        }\n        return this;\n      }\n\n      kotoAssert(this.configs.hasOwnProperty(nameOrObject), `${nameOrObject} is not a valid option.`);\n      definition = this.configs[nameOrObject];\n      if (definition.hasOwnProperty('getter')) {\n        return definition.getter.call(definition);\n      }\n      return definition.value;\n    }\n\n    if(arguments.length === 2) {\n      if (this.configs.hasOwnProperty(nameOrObject)) {\n        definition = this.configs[nameOrObject];\n        if (definition.hasOwnProperty('setter')) {\n          definition.value = definition.setter.call(definition, value);\n        } else {\n          definition.value = value;\n        }\n        if (definition.hasOwnProperty('constrain')) {\n          setPercentage();\n        }\n        this.configs[nameOrObject] = definition;\n      } else {\n        console.warn(`config with name ${nameOrObject} is not defined.`);\n      }\n      return this;\n    }\n  }\n\n  /**\n   * This will get or set any of the chart's accessors.\n   *\n   * @param  {String or Object} item If string, it will return the function for that accessor item.\n   *                                 If object, it will update that accessor with set function.\n   * @param  {function} [value] The function to update accessor item with.\n   * @return {object} The chart to preserve chainability.\n   */\n  accessor (item, value) {\n    var key;\n    if (arguments.length === 0) {\n      return this.accessors;\n    }\n\n    if (arguments.length === 1) {\n      if (typeof item === 'string') {\n        kotoAssert(this.accessors.hasOwnProperty(item), `${item} is not a valid accessor.`);\n        return this.accessors[item];\n      } else {\n        for (key in item) {\n          this.accessors[key] = item[key];\n        }\n      }\n    } else {\n      this.accessors[item] = value;\n    }\n    return this;\n  }\n\n  /**\n   * This will extend a chart by passing in an object of initialize function.\n   * @param  {Object || function} init Initialize function of object with initialize method.\n   * @return {Construtor}      Chart constructor\n   */\n  static extend(init) {\n    class chart extends this {\n      constructor(selection) {\n        var key;\n        super(selection);\n\n        if (typeof init === 'function') {\n          init.call(this);\n        } else {\n          for (key in init) {\n            this[key] = init[key];\n          }\n          this.initialize.call(this);\n        }\n\n      }\n    }\n    return chart;\n  }\n\n}\n\n/**\n* Expose the Layer class so that it can be subclassed.\n*/\nChart.Layer = Layer;\n\n// run tests if on test environment\n// if (ON_TEST) {\n//   require('./assert.spec.js')(kotoAssert);\n//   require('./layer.spec.js')(Layer, Chart);\n//   require('./chart.spec.js')(Chart);\n// }\n\nexport default Chart;\n\n\n\n/** WEBPACK FOOTER **\n ** ./chart.js\n **/","/**\n * Simple Assertion function\n * @param  {anything} test    Anything that will evaluate to true of false.\n * @param  {string} message The error message to send if `test` is false\n */\nfunction kotoAssert(test, message) {\n  if (test) {\n    return;\n  }\n  throw new Error(`[koto] ${message}`);\n}\n\nexport default kotoAssert;\n\n\n\n/** WEBPACK FOOTER **\n ** ./assert.js\n **/","import kotoAssert from './assert.js';\nimport { selection } from 'd3-selection';\nconst _d3 = { selection: selection };\n/**\n * Create a layer using the provided `base` selection.\n *\n * @class\n *\n * @param {d3.selection} base The containing DOM node for the layer.\n * @param {Object} options Overrides for databind, insert and event methods.\n * @param {Function} options.databind databind override\n * @param {Function} options.insert insert override\n * @param {Function} [options.events] life-cycle event handler overrides.\n *                                  Possible values are [enter, update, merge, exit]\n *                                  with or without the 'transition postfix'.\n */\nclass Layer {\n  constructor(base, options) {\n    this._base = base;\n    this._handlers = {};\n    this._lifecycleRe = /^(enter|update|merge|exit)(:transition)?$/;\n\n    if (options) {\n      // Set layer methods (required)\n      this.dataBind = options.dataBind;\n      this.insert = options.insert;\n\n      // Bind events (optional)\n      if ('events' in options) {\n        for (var eventName in options.events) {\n          this.on(eventName, options.events[eventName]);\n        }\n      }\n    }\n  }\n\n  /**\n   * Invoked by {@link Layer#draw} to join data with this layer's DOM nodes. This\n   * implementation is \"virtual\"--it *must* be overridden by Layer instances.\n   *\n   * @param {Array} data Value passed to {@link Layer#draw}\n   * @param {Object} [context] the instance of this layers\n   */\n  dataBind() {\n    kotoAssert(false, 'Layers must specify a dataBind method.');\n  }\n\n  /**\n   * Invoked by {@link Layer#draw} in order to insert new DOM nodes into this\n   * layer's `base`. This implementation is \"virtual\"--it *must* be overridden by\n   * Layer instances.\n   */\n  insert() {\n    kotoAssert(false, 'Layers must specify an `insert` method.');\n  }\n\n  /**\n   * Subscribe a handler to a lifecycle event. These events (and only these\n   * events) are triggered when {@link Layer#draw} is invoked--see that method\n   * for more details on lifecycle events.\n   *\n   * @param {String} eventName Identifier for the lifecycle event for which to\n   *        subscribe.\n   * @param {Function} handler Callback function\n   *\n   * @returns {Chart} Reference to the layer instance (for chaining).\n   */\n  on(eventName, handler, options) {\n    options = options || {};\n\n    kotoAssert(this._lifecycleRe.test(eventName),\n      `Unrecognized lifecycle event name specified to 'Layer#on': '${eventName}'.`);\n\n    if (!(eventName in this._handlers)) {\n      this._handlers[eventName] = [];\n    }\n    this._handlers[eventName].push({\n      callback: handler,\n      chart: options.chart || null\n    });\n\n    return this;\n  }\n\n  /**\n   * Unsubscribe the specified handler from the specified event. If no handler is\n   * supplied, remove *all* handlers from the event.\n   *\n   * @param {String} eventName Identifier for event from which to remove\n   *        unsubscribe\n   * @param {Function} handler Callback to remove from the specified event\n   *\n   * @returns {Chart} Reference to the layer instance (for chaining).\n   */\n  off(eventName, handler) {\n    var handlers = this._handlers[eventName];\n    var idx;\n\n    kotoAssert(this._lifecycleRe.test(eventName),\n      `Unrecognized lifecycle event name specified to 'Layer#on': '${eventName}'.`);\n\n    if (!handlers) {\n      return this;\n    }\n\n    if (arguments.length === 1) {\n      handlers.length = 0;\n      return this;\n    }\n\n    for (idx = handlers.length - 1; idx > -1; --idx) {\n      if (handlers[idx].callback === handler) {\n        handlers.splice(idx, 1);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Render the layer according to the input data. Bind the data to the layer\n   * (according to {@link Layer#dataBind}, insert new elements (according to\n   * {@link Layer#insert}, make lifecycle selections, and invoke all relevant\n   * handlers (as attached via {@link Layer#on}) with the lifecycle selections.\n   *\n   * - update\n   * - update:transition\n   * - enter\n   * - enter:transition\n   * - exit\n   * - exit:transition\n   *\n   * @param {Array} data Data to drive the rendering.\n   */\n  draw(data) {\n    var bound,\n      entering,\n      events,\n      selection,\n      method,\n      handlers,\n      eventName,\n      idx,\n      len,\n      tidx,\n      tlen,\n      promises = [];\n\n    function endall(transition, callback) {\n      var n = 0;\n      if (transition.size() === 0) {\n        callback();\n      } else {\n        transition\n          .each(function() {\n            ++n;\n          })\n          .on('interrupt.promise', function () {\n            callback.apply(this, arguments);\n          })\n          .on('end.promise', function () {\n            if (!--n) {\n              callback.apply(this, arguments);\n            }\n          });\n      }\n    }\n\n    function promiseCallback (resolve) {\n      selection.call(endall, function() {\n        resolve(true);\n      });\n    }\n\n    bound = this.dataBind.call(this._base, data, this);\n\n    kotoAssert(bound instanceof _d3.selection,\n      'Invalid selection defined by `Layer#dataBind` method.');\n    kotoAssert(bound.enter, 'Layer selection not properly bound.');\n\n    entering = bound.enter();\n    entering._chart = this._base._chart;\n\n    events = [\n      {\n        name: 'update',\n        selection: bound\n      },\n      {\n        name: 'enter',\n        selection: entering,\n        method: this.insert\n      },\n      {\n        name: 'merge',\n        // Although the `merge` lifecycle event shares its selection object\n        // with the `update` lifecycle event, the object's contents will be\n        // modified when koto invokes the user-supplied `insert` method\n        // when triggering the `enter` event.\n        selection: bound\n      },\n      {\n        name: 'exit',\n        // Although the `exit` lifecycle event shares its selection object\n        // with the `update` and `merge` lifecycle events, the object's\n        // contents will be modified when koto invokes\n        // `d3.selection.exit`.\n        selection: bound,\n        method: bound.exit\n      }\n    ];\n\n    for (var i = 0, l = events.length; i < l; ++i) {\n      eventName = events[i].name;\n      selection = events[i].selection;\n      method = events[i].method;\n\n      // Some lifecycle selections modify shared state, so they must be\n      // deferred until just prior to handler invocation.\n      if (typeof method === 'function') {\n        selection = method.call(selection, selection);\n      }\n\n      if (selection.empty()) {\n        continue;\n      }\n\n      kotoAssert(selection && selection instanceof _d3.selection,\n        `Invalid selection defined for ${eventName} lifecycle event.`);\n\n      handlers = this._handlers[eventName];\n\n      if (handlers) {\n        for (idx = 0, len = handlers.length; idx < len; ++idx) {\n          // Attach a reference to the parent chart so the selection's\n          // `chart` method will function correctly.\n          selection._chart = handlers[idx].chart || this._base._chart;\n          // selection.call(handlers[idx].callback);\n          handlers[idx].callback.call(selection, selection);\n        }\n      }\n\n      handlers = this._handlers[eventName + ':transition'];\n\n      if (handlers && handlers.length) {\n        selection = selection.transition();\n        for (tlen = handlers.length, tidx = 0; tidx < tlen; ++tidx) {\n          selection._chart = handlers[tidx].chart || this._base._chart;\n          // selection.call(handlers[tidx].callback);\n          handlers[tidx].callback.call(selection, selection);\n          promises.push(new Promise(promiseCallback));\n        }\n      }\n      this.promise = Promise.all(promises);\n    }\n  }\n}\n\nexport default Layer;\n\n\n\n/** WEBPACK FOOTER **\n ** ./layer.js\n **/","// https://d3js.org/d3-selection/ Version 1.0.0. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3 = global.d3 || {})));\n}(this, function (exports) { 'use strict';\n\n  var xhtml = \"http://www.w3.org/1999/xhtml\";\n\n  var namespaces = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: xhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n\n  function namespace(name) {\n    var prefix = name += \"\", i = prefix.indexOf(\":\");\n    if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n    return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;\n  }\n\n  function creatorInherit(name) {\n    return function() {\n      var document = this.ownerDocument,\n          uri = this.namespaceURI;\n      return uri === xhtml && document.documentElement.namespaceURI === xhtml\n          ? document.createElement(name)\n          : document.createElementNS(uri, name);\n    };\n  }\n\n  function creatorFixed(fullname) {\n    return function() {\n      return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n    };\n  }\n\n  function creator(name) {\n    var fullname = namespace(name);\n    return (fullname.local\n        ? creatorFixed\n        : creatorInherit)(fullname);\n  }\n\n  var nextId = 0;\n\n  function local() {\n    return new Local;\n  }\n\n  function Local() {\n    this._ = \"@\" + (++nextId).toString(36);\n  }\n\n  Local.prototype = local.prototype = {\n    constructor: Local,\n    get: function(node) {\n      var id = this._;\n      while (!(id in node)) if (!(node = node.parentNode)) return;\n      return node[id];\n    },\n    set: function(node, value) {\n      return node[this._] = value;\n    },\n    remove: function(node) {\n      return this._ in node && delete node[this._];\n    },\n    toString: function() {\n      return this._;\n    }\n  };\n\n  var matcher = function(selector) {\n    return function() {\n      return this.matches(selector);\n    };\n  };\n\n  if (typeof document !== \"undefined\") {\n    var element = document.documentElement;\n    if (!element.matches) {\n      var vendorMatches = element.webkitMatchesSelector\n          || element.msMatchesSelector\n          || element.mozMatchesSelector\n          || element.oMatchesSelector;\n      matcher = function(selector) {\n        return function() {\n          return vendorMatches.call(this, selector);\n        };\n      };\n    }\n  }\n\n  var matcher$1 = matcher;\n\n  var filterEvents = {};\n\n  exports.event = null;\n\n  if (typeof document !== \"undefined\") {\n    var element$1 = document.documentElement;\n    if (!(\"onmouseenter\" in element$1)) {\n      filterEvents = {mouseenter: \"mouseover\", mouseleave: \"mouseout\"};\n    }\n  }\n\n  function filterContextListener(listener, index, group) {\n    listener = contextListener(listener, index, group);\n    return function(event) {\n      var related = event.relatedTarget;\n      if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {\n        listener.call(this, event);\n      }\n    };\n  }\n\n  function contextListener(listener, index, group) {\n    return function(event1) {\n      var event0 = exports.event; // Events can be reentrant (e.g., focus).\n      exports.event = event1;\n      try {\n        listener.call(this, this.__data__, index, group);\n      } finally {\n        exports.event = event0;\n      }\n    };\n  }\n\n  function parseTypenames(typenames) {\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\n      var name = \"\", i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      return {type: t, name: name};\n    });\n  }\n\n  function onRemove(typename) {\n    return function() {\n      var on = this.__on;\n      if (!on) return;\n      for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n          this.removeEventListener(o.type, o.listener, o.capture);\n        } else {\n          on[++i] = o;\n        }\n      }\n      if (++i) on.length = i;\n      else delete this.__on;\n    };\n  }\n\n  function onAdd(typename, value, capture) {\n    var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\n    return function(d, i, group) {\n      var on = this.__on, o, listener = wrap(value, i, group);\n      if (on) for (var j = 0, m = on.length; j < m; ++j) {\n        if ((o = on[j]).type === typename.type && o.name === typename.name) {\n          this.removeEventListener(o.type, o.listener, o.capture);\n          this.addEventListener(o.type, o.listener = listener, o.capture = capture);\n          o.value = value;\n          return;\n        }\n      }\n      this.addEventListener(typename.type, listener, capture);\n      o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};\n      if (!on) this.__on = [o];\n      else on.push(o);\n    };\n  }\n\n  function selection_on(typename, value, capture) {\n    var typenames = parseTypenames(typename + \"\"), i, n = typenames.length, t;\n\n    if (arguments.length < 2) {\n      var on = this.node().__on;\n      if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n        for (i = 0, o = on[j]; i < n; ++i) {\n          if ((t = typenames[i]).type === o.type && t.name === o.name) {\n            return o.value;\n          }\n        }\n      }\n      return;\n    }\n\n    on = value ? onAdd : onRemove;\n    if (capture == null) capture = false;\n    for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));\n    return this;\n  }\n\n  function customEvent(event1, listener, that, args) {\n    var event0 = exports.event;\n    event1.sourceEvent = exports.event;\n    exports.event = event1;\n    try {\n      return listener.apply(that, args);\n    } finally {\n      exports.event = event0;\n    }\n  }\n\n  function sourceEvent() {\n    var current = exports.event, source;\n    while (source = current.sourceEvent) current = source;\n    return current;\n  }\n\n  function point(node, event) {\n    var svg = node.ownerSVGElement || node;\n\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      point.x = event.clientX, point.y = event.clientY;\n      point = point.matrixTransform(node.getScreenCTM().inverse());\n      return [point.x, point.y];\n    }\n\n    var rect = node.getBoundingClientRect();\n    return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n  }\n\n  function mouse(node) {\n    var event = sourceEvent();\n    if (event.changedTouches) event = event.changedTouches[0];\n    return point(node, event);\n  }\n\n  function none() {}\n\n  function selector(selector) {\n    return selector == null ? none : function() {\n      return this.querySelector(selector);\n    };\n  }\n\n  function selection_select(select) {\n    if (typeof select !== \"function\") select = selector(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          subgroup[i] = subnode;\n        }\n      }\n    }\n\n    return new Selection(subgroups, this._parents);\n  }\n\n  function empty() {\n    return [];\n  }\n\n  function selectorAll(selector) {\n    return selector == null ? empty : function() {\n      return this.querySelectorAll(selector);\n    };\n  }\n\n  function selection_selectAll(select) {\n    if (typeof select !== \"function\") select = selectorAll(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          subgroups.push(select.call(node, node.__data__, i, group));\n          parents.push(node);\n        }\n      }\n    }\n\n    return new Selection(subgroups, parents);\n  }\n\n  function selection_filter(match) {\n    if (typeof match !== \"function\") match = matcher$1(match);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n          subgroup.push(node);\n        }\n      }\n    }\n\n    return new Selection(subgroups, this._parents);\n  }\n\n  function sparse(update) {\n    return new Array(update.length);\n  }\n\n  function selection_enter() {\n    return new Selection(this._enter || this._groups.map(sparse), this._parents);\n  }\n\n  function EnterNode(parent, datum) {\n    this.ownerDocument = parent.ownerDocument;\n    this.namespaceURI = parent.namespaceURI;\n    this._next = null;\n    this._parent = parent;\n    this.__data__ = datum;\n  }\n\n  EnterNode.prototype = {\n    constructor: EnterNode,\n    appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n    insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n    querySelector: function(selector) { return this._parent.querySelector(selector); },\n    querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n  };\n\n  function constant(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  var keyPrefix = \"$\"; // Protect against keys like “__proto__”.\n\n  function bindIndex(parent, group, enter, update, exit, data) {\n    var i = 0,\n        node,\n        groupLength = group.length,\n        dataLength = data.length;\n\n    // Put any non-null nodes that fit into update.\n    // Put any null nodes into enter.\n    // Put any remaining data into enter.\n    for (; i < dataLength; ++i) {\n      if (node = group[i]) {\n        node.__data__ = data[i];\n        update[i] = node;\n      } else {\n        enter[i] = new EnterNode(parent, data[i]);\n      }\n    }\n\n    // Put any non-null nodes that don’t fit into exit.\n    for (; i < groupLength; ++i) {\n      if (node = group[i]) {\n        exit[i] = node;\n      }\n    }\n  }\n\n  function bindKey(parent, group, enter, update, exit, data, key) {\n    var i,\n        node,\n        nodeByKeyValue = {},\n        groupLength = group.length,\n        dataLength = data.length,\n        keyValues = new Array(groupLength),\n        keyValue;\n\n    // Compute the key for each node.\n    // If multiple nodes have the same key, the duplicates are added to exit.\n    for (i = 0; i < groupLength; ++i) {\n      if (node = group[i]) {\n        keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);\n        if (keyValue in nodeByKeyValue) {\n          exit[i] = node;\n        } else {\n          nodeByKeyValue[keyValue] = node;\n        }\n      }\n    }\n\n    // Compute the key for each datum.\n    // If there a node associated with this key, join and add it to update.\n    // If there is not (or the key is a duplicate), add it to enter.\n    for (i = 0; i < dataLength; ++i) {\n      keyValue = keyPrefix + key.call(parent, data[i], i, data);\n      if (node = nodeByKeyValue[keyValue]) {\n        update[i] = node;\n        node.__data__ = data[i];\n        nodeByKeyValue[keyValue] = null;\n      } else {\n        enter[i] = new EnterNode(parent, data[i]);\n      }\n    }\n\n    // Add any remaining nodes that were not bound to data to exit.\n    for (i = 0; i < groupLength; ++i) {\n      if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {\n        exit[i] = node;\n      }\n    }\n  }\n\n  function selection_data(value, key) {\n    if (!value) {\n      data = new Array(this.size()), j = -1;\n      this.each(function(d) { data[++j] = d; });\n      return data;\n    }\n\n    var bind = key ? bindKey : bindIndex,\n        parents = this._parents,\n        groups = this._groups;\n\n    if (typeof value !== \"function\") value = constant(value);\n\n    for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n      var parent = parents[j],\n          group = groups[j],\n          groupLength = group.length,\n          data = value.call(parent, parent && parent.__data__, j, parents),\n          dataLength = data.length,\n          enterGroup = enter[j] = new Array(dataLength),\n          updateGroup = update[j] = new Array(dataLength),\n          exitGroup = exit[j] = new Array(groupLength);\n\n      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n      // Now connect the enter nodes to their following update node, such that\n      // appendChild can insert the materialized enter node before this node,\n      // rather than at the end of the parent node.\n      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n        if (previous = enterGroup[i0]) {\n          if (i0 >= i1) i1 = i0 + 1;\n          while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n          previous._next = next || null;\n        }\n      }\n    }\n\n    update = new Selection(update, parents);\n    update._enter = enter;\n    update._exit = exit;\n    return update;\n  }\n\n  function selection_exit() {\n    return new Selection(this._exit || this._groups.map(sparse), this._parents);\n  }\n\n  function selection_merge(selection) {\n\n    for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group0[i] || group1[i]) {\n          merge[i] = node;\n        }\n      }\n    }\n\n    for (; j < m0; ++j) {\n      merges[j] = groups0[j];\n    }\n\n    return new Selection(merges, this._parents);\n  }\n\n  function selection_order() {\n\n    for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function selection_sort(compare) {\n    if (!compare) compare = ascending;\n\n    function compareNode(a, b) {\n      return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n    }\n\n    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          sortgroup[i] = node;\n        }\n      }\n      sortgroup.sort(compareNode);\n    }\n\n    return new Selection(sortgroups, this._parents).order();\n  }\n\n  function ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function selection_call() {\n    var callback = arguments[0];\n    arguments[0] = this;\n    callback.apply(null, arguments);\n    return this;\n  }\n\n  function selection_nodes() {\n    var nodes = new Array(this.size()), i = -1;\n    this.each(function() { nodes[++i] = this; });\n    return nodes;\n  }\n\n  function selection_node() {\n\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n      for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n\n    return null;\n  }\n\n  function selection_size() {\n    var size = 0;\n    this.each(function() { ++size; });\n    return size;\n  }\n\n  function selection_empty() {\n    return !this.node();\n  }\n\n  function selection_each(callback) {\n\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n        if (node = group[i]) callback.call(node, node.__data__, i, group);\n      }\n    }\n\n    return this;\n  }\n\n  function attrRemove(name) {\n    return function() {\n      this.removeAttribute(name);\n    };\n  }\n\n  function attrRemoveNS(fullname) {\n    return function() {\n      this.removeAttributeNS(fullname.space, fullname.local);\n    };\n  }\n\n  function attrConstant(name, value) {\n    return function() {\n      this.setAttribute(name, value);\n    };\n  }\n\n  function attrConstantNS(fullname, value) {\n    return function() {\n      this.setAttributeNS(fullname.space, fullname.local, value);\n    };\n  }\n\n  function attrFunction(name, value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) this.removeAttribute(name);\n      else this.setAttribute(name, v);\n    };\n  }\n\n  function attrFunctionNS(fullname, value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n      else this.setAttributeNS(fullname.space, fullname.local, v);\n    };\n  }\n\n  function selection_attr(name, value) {\n    var fullname = namespace(name);\n\n    if (arguments.length < 2) {\n      var node = this.node();\n      return fullname.local\n          ? node.getAttributeNS(fullname.space, fullname.local)\n          : node.getAttribute(fullname);\n    }\n\n    return this.each((value == null\n        ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\n        ? (fullname.local ? attrFunctionNS : attrFunction)\n        : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n  }\n\n  function defaultView(node) {\n    return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n        || (node.document && node) // node is a Window\n        || node.defaultView; // node is a Document\n  }\n\n  function styleRemove(name) {\n    return function() {\n      this.style.removeProperty(name);\n    };\n  }\n\n  function styleConstant(name, value, priority) {\n    return function() {\n      this.style.setProperty(name, value, priority);\n    };\n  }\n\n  function styleFunction(name, value, priority) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) this.style.removeProperty(name);\n      else this.style.setProperty(name, v, priority);\n    };\n  }\n\n  function selection_style(name, value, priority) {\n    var node;\n    return arguments.length > 1\n        ? this.each((value == null\n              ? styleRemove : typeof value === \"function\"\n              ? styleFunction\n              : styleConstant)(name, value, priority == null ? \"\" : priority))\n        : defaultView(node = this.node())\n            .getComputedStyle(node, null)\n            .getPropertyValue(name);\n  }\n\n  function propertyRemove(name) {\n    return function() {\n      delete this[name];\n    };\n  }\n\n  function propertyConstant(name, value) {\n    return function() {\n      this[name] = value;\n    };\n  }\n\n  function propertyFunction(name, value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) delete this[name];\n      else this[name] = v;\n    };\n  }\n\n  function selection_property(name, value) {\n    return arguments.length > 1\n        ? this.each((value == null\n            ? propertyRemove : typeof value === \"function\"\n            ? propertyFunction\n            : propertyConstant)(name, value))\n        : this.node()[name];\n  }\n\n  function classArray(string) {\n    return string.trim().split(/^|\\s+/);\n  }\n\n  function classList(node) {\n    return node.classList || new ClassList(node);\n  }\n\n  function ClassList(node) {\n    this._node = node;\n    this._names = classArray(node.getAttribute(\"class\") || \"\");\n  }\n\n  ClassList.prototype = {\n    add: function(name) {\n      var i = this._names.indexOf(name);\n      if (i < 0) {\n        this._names.push(name);\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\n      }\n    },\n    remove: function(name) {\n      var i = this._names.indexOf(name);\n      if (i >= 0) {\n        this._names.splice(i, 1);\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\n      }\n    },\n    contains: function(name) {\n      return this._names.indexOf(name) >= 0;\n    }\n  };\n\n  function classedAdd(node, names) {\n    var list = classList(node), i = -1, n = names.length;\n    while (++i < n) list.add(names[i]);\n  }\n\n  function classedRemove(node, names) {\n    var list = classList(node), i = -1, n = names.length;\n    while (++i < n) list.remove(names[i]);\n  }\n\n  function classedTrue(names) {\n    return function() {\n      classedAdd(this, names);\n    };\n  }\n\n  function classedFalse(names) {\n    return function() {\n      classedRemove(this, names);\n    };\n  }\n\n  function classedFunction(names, value) {\n    return function() {\n      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n    };\n  }\n\n  function selection_classed(name, value) {\n    var names = classArray(name + \"\");\n\n    if (arguments.length < 2) {\n      var list = classList(this.node()), i = -1, n = names.length;\n      while (++i < n) if (!list.contains(names[i])) return false;\n      return true;\n    }\n\n    return this.each((typeof value === \"function\"\n        ? classedFunction : value\n        ? classedTrue\n        : classedFalse)(names, value));\n  }\n\n  function textRemove() {\n    this.textContent = \"\";\n  }\n\n  function textConstant(value) {\n    return function() {\n      this.textContent = value;\n    };\n  }\n\n  function textFunction(value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    };\n  }\n\n  function selection_text(value) {\n    return arguments.length\n        ? this.each(value == null\n            ? textRemove : (typeof value === \"function\"\n            ? textFunction\n            : textConstant)(value))\n        : this.node().textContent;\n  }\n\n  function htmlRemove() {\n    this.innerHTML = \"\";\n  }\n\n  function htmlConstant(value) {\n    return function() {\n      this.innerHTML = value;\n    };\n  }\n\n  function htmlFunction(value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    };\n  }\n\n  function selection_html(value) {\n    return arguments.length\n        ? this.each(value == null\n            ? htmlRemove : (typeof value === \"function\"\n            ? htmlFunction\n            : htmlConstant)(value))\n        : this.node().innerHTML;\n  }\n\n  function raise() {\n    if (this.nextSibling) this.parentNode.appendChild(this);\n  }\n\n  function selection_raise() {\n    return this.each(raise);\n  }\n\n  function lower() {\n    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n  }\n\n  function selection_lower() {\n    return this.each(lower);\n  }\n\n  function selection_append(name) {\n    var create = typeof name === \"function\" ? name : creator(name);\n    return this.select(function() {\n      return this.appendChild(create.apply(this, arguments));\n    });\n  }\n\n  function constantNull() {\n    return null;\n  }\n\n  function selection_insert(name, before) {\n    var create = typeof name === \"function\" ? name : creator(name),\n        select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n    return this.select(function() {\n      return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n    });\n  }\n\n  function remove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n\n  function selection_remove() {\n    return this.each(remove);\n  }\n\n  function selection_datum(value) {\n    return arguments.length\n        ? this.property(\"__data__\", value)\n        : this.node().__data__;\n  }\n\n  function dispatchEvent(node, type, params) {\n    var window = defaultView(node),\n        event = window.CustomEvent;\n\n    if (event) {\n      event = new event(type, params);\n    } else {\n      event = window.document.createEvent(\"Event\");\n      if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n      else event.initEvent(type, false, false);\n    }\n\n    node.dispatchEvent(event);\n  }\n\n  function dispatchConstant(type, params) {\n    return function() {\n      return dispatchEvent(this, type, params);\n    };\n  }\n\n  function dispatchFunction(type, params) {\n    return function() {\n      return dispatchEvent(this, type, params.apply(this, arguments));\n    };\n  }\n\n  function selection_dispatch(type, params) {\n    return this.each((typeof params === \"function\"\n        ? dispatchFunction\n        : dispatchConstant)(type, params));\n  }\n\n  var root = [null];\n\n  function Selection(groups, parents) {\n    this._groups = groups;\n    this._parents = parents;\n  }\n\n  function selection() {\n    return new Selection([[document.documentElement]], root);\n  }\n\n  Selection.prototype = selection.prototype = {\n    constructor: Selection,\n    select: selection_select,\n    selectAll: selection_selectAll,\n    filter: selection_filter,\n    data: selection_data,\n    enter: selection_enter,\n    exit: selection_exit,\n    merge: selection_merge,\n    order: selection_order,\n    sort: selection_sort,\n    call: selection_call,\n    nodes: selection_nodes,\n    node: selection_node,\n    size: selection_size,\n    empty: selection_empty,\n    each: selection_each,\n    attr: selection_attr,\n    style: selection_style,\n    property: selection_property,\n    classed: selection_classed,\n    text: selection_text,\n    html: selection_html,\n    raise: selection_raise,\n    lower: selection_lower,\n    append: selection_append,\n    insert: selection_insert,\n    remove: selection_remove,\n    datum: selection_datum,\n    on: selection_on,\n    dispatch: selection_dispatch\n  };\n\n  function select(selector) {\n    return typeof selector === \"string\"\n        ? new Selection([[document.querySelector(selector)]], [document.documentElement])\n        : new Selection([[selector]], root);\n  }\n\n  function selectAll(selector) {\n    return typeof selector === \"string\"\n        ? new Selection([document.querySelectorAll(selector)], [document.documentElement])\n        : new Selection([selector == null ? [] : selector], root);\n  }\n\n  function touch(node, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;\n\n    for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return point(node, touch);\n      }\n    }\n\n    return null;\n  }\n\n  function touches(node, touches) {\n    if (touches == null) touches = sourceEvent().touches;\n\n    for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {\n      points[i] = point(node, touches[i]);\n    }\n\n    return points;\n  }\n\n  exports.creator = creator;\n  exports.local = local;\n  exports.matcher = matcher$1;\n  exports.mouse = mouse;\n  exports.namespace = namespace;\n  exports.namespaces = namespaces;\n  exports.select = select;\n  exports.selectAll = selectAll;\n  exports.selection = selection;\n  exports.selector = selector;\n  exports.selectorAll = selectorAll;\n  exports.touch = touch;\n  exports.touches = touches;\n  exports.window = defaultView;\n  exports.customEvent = customEvent;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/d3-selection/build/d3-selection.js\n ** module id = 3\n ** module chunks = 0\n **/"],"sourceRoot":""}